CCS PCH C Compiler, Version 5.090, 49113               10-Jan-22 16:40

               Filename:   C:\Users\James Jarvis\Desktop\planetPrecision\dcswc_module_voltage_current_counter\dcswc_module_voltage_current_counter.lst

               ROM used:   4182 bytes (27%)
                           Largest free fragment is 11366
               RAM used:   114 (22%) at main() level
                           145 (28%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 30

0000:  GOTO   0C6E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00BA
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   03A4
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "dcswc_module_voltage_current_counter.h"
.................... #include <18F14K22.h>
.................... //////////// Standard Header file for the PIC18F14K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F14K22
*
0458:  DATA 23,20
045A:  DATA 64,63
045C:  DATA 73,77
045E:  DATA 63,5F
0460:  DATA 6D,6F
0462:  DATA 64,75
0464:  DATA 6C,65
0466:  DATA 5F,76
0468:  DATA 6F,6C
046A:  DATA 74,61
046C:  DATA 67,65
046E:  DATA 5F,63
0470:  DATA 75,72
0472:  DATA 72,65
0474:  DATA 6E,74
0476:  DATA 5F,63
0478:  DATA 6F,75
047A:  DATA 6E,74
047C:  DATA 65,72
047E:  DATA 20,25
0480:  DATA 73,0D
0482:  DATA 0A,00
0484:  DATA 31,30
0486:  DATA 2D,4A
0488:  DATA 61,6E
048A:  DATA 2D,32
048C:  DATA 32,00
048E:  DATA 23,20
0490:  DATA 44,49
0492:  DATA 50,20
0494:  DATA 53,57
0496:  DATA 49,54
0498:  DATA 43,48
049A:  DATA 45,53
049C:  DATA 3A,20
049E:  DATA 25,64
04A0:  DATA 0D,0A
04A2:  DATA 00,00
04A4:  DATA 23,20
04A6:  DATA 41,3A
04A8:  DATA 20,30
04AA:  DATA 78,25
04AC:  DATA 30,38
04AE:  DATA 6C,78
04B0:  DATA 20,2F
04B2:  DATA 20,30
04B4:  DATA 78,25
04B6:  DATA 30,38
04B8:  DATA 6C,78
04BA:  DATA 20,2F
04BC:  DATA 20,30
04BE:  DATA 78,25
04C0:  DATA 30,34
04C2:  DATA 6C,75
04C4:  DATA 0D,0A
04C6:  DATA 00,00
04C8:  DATA 23,20
04CA:  DATA 42,3A
04CC:  DATA 20,30
04CE:  DATA 78,25
04D0:  DATA 30,38
04D2:  DATA 6C,78
04D4:  DATA 20,2F
04D6:  DATA 20,30
04D8:  DATA 78,25
04DA:  DATA 30,38
04DC:  DATA 6C,78
04DE:  DATA 20,2F
04E0:  DATA 20,30
04E2:  DATA 78,25
04E4:  DATA 30,34
04E6:  DATA 6C,75
04E8:  DATA 0D,0A
04EA:  DATA 00,00
04EC:  DATA 23,20
04EE:  DATA 63,75
04F0:  DATA 72,72
04F2:  DATA 65,6E
04F4:  DATA 74,2E
04F6:  DATA 63,6F
04F8:  DATA 75,6E
04FA:  DATA 74,5F
04FC:  DATA 61,5F
04FE:  DATA 6C,61
0500:  DATA 73,74
0502:  DATA 5F,73
0504:  DATA 65,63
0506:  DATA 6F,6E
0508:  DATA 64,3D
050A:  DATA 25,6C
050C:  DATA 75,0D
050E:  DATA 0A,00
0510:  DATA 23,20
0512:  DATA 63,75
0514:  DATA 72,72
0516:  DATA 65,6E
0518:  DATA 74,2E
051A:  DATA 63,6F
051C:  DATA 75,6E
051E:  DATA 74,5F
0520:  DATA 62,5F
0522:  DATA 6C,61
0524:  DATA 73,74
0526:  DATA 5F,73
0528:  DATA 65,63
052A:  DATA 6F,6E
052C:  DATA 64,3D
052E:  DATA 25,6C
0530:  DATA 75,0D
0532:  DATA 0A,00
0534:  DATA 23,20
0536:  DATA 63,75
0538:  DATA 72,72
053A:  DATA 65,6E
053C:  DATA 74,2E
053E:  DATA 63,6F
0540:  DATA 75,6E
0542:  DATA 74,5F
0544:  DATA 61,5F
0546:  DATA 6C,6F
0548:  DATA 6E,67
054A:  DATA 3D,25
054C:  DATA 6C,75
054E:  DATA 0D,0A
0550:  DATA 00,00
0552:  DATA 23,20
0554:  DATA 63,75
0556:  DATA 72,72
0558:  DATA 65,6E
055A:  DATA 74,2E
055C:  DATA 63,6F
055E:  DATA 75,6E
0560:  DATA 74,5F
0562:  DATA 62,5F
0564:  DATA 6C,6F
0566:  DATA 6E,67
0568:  DATA 3D,25
056A:  DATA 6C,75
056C:  DATA 0D,0A
056E:  DATA 00,00
0570:  DATA 23,20
0572:  DATA 63,75
0574:  DATA 72,72
0576:  DATA 65,6E
0578:  DATA 74,2E
057A:  DATA 63,6F
057C:  DATA 75,6E
057E:  DATA 74,5F
0580:  DATA 73,65
0582:  DATA 63,6F
0584:  DATA 6E,64
0586:  DATA 73,5F
0588:  DATA 6C,6F
058A:  DATA 6E,67
058C:  DATA 3D,25
058E:  DATA 6C,75
0590:  DATA 0D,0A
0592:  DATA 00,00
0594:  DATA 23,20
0596:  DATA 69,6E
0598:  DATA 70,75
059A:  DATA 74,28
059C:  DATA 50,49
059E:  DATA 43,5F
05A0:  DATA 41,44
05A2:  DATA 44,52
05A4:  DATA 5F,4D
05A6:  DATA 53,42
05A8:  DATA 29,3D
05AA:  DATA 25,75
05AC:  DATA 0D,0A
05AE:  DATA 00,00
05B0:  DATA 23,20
05B2:  DATA 69,6E
05B4:  DATA 70,75
05B6:  DATA 74,28
05B8:  DATA 50,49
05BA:  DATA 43,5F
05BC:  DATA 41,44
05BE:  DATA 44,52
05C0:  DATA 5F,4C
05C2:  DATA 53,42
05C4:  DATA 29,3D
05C6:  DATA 25,75
05C8:  DATA 0D,0A
05CA:  DATA 00,00
*
062C:  TBLRD*+
062E:  MOVFF  FF6,73
0632:  MOVFF  FF7,74
0636:  MOVF   FF5,W
0638:  BTFSS  F9E.4
063A:  BRA    0638
063C:  MOVWF  FAD
063E:  MOVFF  73,FF6
0642:  MOVFF  74,FF7
0646:  DECFSZ x72,F
0648:  BRA    062C
064A:  RETURN 0
064C:  TBLRD*+
064E:  MOVF   FF5,F
0650:  BZ    066C
0652:  MOVFF  FF6,71
0656:  MOVFF  FF7,72
065A:  MOVF   FF5,W
065C:  BTFSS  F9E.4
065E:  BRA    065C
0660:  MOVWF  FAD
0662:  MOVFF  71,FF6
0666:  MOVFF  72,FF7
066A:  BRA    064C
066C:  GOTO   0D4E (RETURN)
*
0904:  MOVF   x79,W
0906:  CLRF   01
0908:  SUBWF  x78,W
090A:  BC    0912
090C:  MOVFF  78,00
0910:  BRA    092A
0912:  CLRF   00
0914:  MOVLW  08
0916:  MOVWF  x7A
0918:  RLCF   x78,F
091A:  RLCF   00,F
091C:  MOVF   x79,W
091E:  SUBWF  00,W
0920:  BTFSC  FD8.0
0922:  MOVWF  00
0924:  RLCF   01,F
0926:  DECFSZ x7A,F
0928:  BRA    0918
092A:  RETURN 0
092C:  MOVLW  20
092E:  BTFSS  x73.4
0930:  MOVLW  30
0932:  MOVWF  x74
0934:  MOVFF  72,00
0938:  BTFSS  x72.7
093A:  BRA    094C
093C:  COMF   00,F
093E:  INCF   00,F
0940:  MOVFF  00,72
0944:  MOVLW  2D
0946:  MOVWF  x74
0948:  BSF    x73.7
094A:  BSF    x73.0
094C:  MOVF   01,W
094E:  MOVFF  72,78
0952:  MOVLW  64
0954:  MOVWF  x79
0956:  RCALL  0904
0958:  MOVFF  00,72
095C:  MOVLW  30
095E:  ADDWF  01,W
0960:  MOVWF  x75
0962:  MOVFF  72,78
0966:  MOVLW  0A
0968:  MOVWF  x79
096A:  RCALL  0904
096C:  MOVLW  30
096E:  ADDWF  00,W
0970:  MOVWF  x77
0972:  MOVLW  30
0974:  ADDWF  01,W
0976:  MOVWF  x76
0978:  MOVFF  74,00
097C:  MOVLW  30
097E:  SUBWF  x75,W
0980:  BZ    098A
0982:  BSF    x73.1
0984:  BTFSC  x73.7
0986:  BSF    x73.2
0988:  BRA    09AE
098A:  MOVFF  74,75
098E:  MOVLW  20
0990:  MOVWF  x74
0992:  MOVLW  30
0994:  SUBWF  x76,W
0996:  BZ    09A0
0998:  BSF    x73.0
099A:  BTFSC  x73.7
099C:  BSF    x73.1
099E:  BRA    09AE
09A0:  BTFSS  FD8.2
09A2:  BSF    x73.0
09A4:  BNZ   09AE
09A6:  MOVFF  75,76
09AA:  MOVLW  20
09AC:  MOVWF  x75
09AE:  BTFSC  x73.2
09B0:  BRA    09BC
09B2:  BTFSC  x73.1
09B4:  BRA    09C4
09B6:  BTFSC  x73.0
09B8:  BRA    09CC
09BA:  BRA    09D4
09BC:  MOVF   x74,W
09BE:  BTFSS  F9E.4
09C0:  BRA    09BE
09C2:  MOVWF  FAD
09C4:  MOVF   x75,W
09C6:  BTFSS  F9E.4
09C8:  BRA    09C6
09CA:  MOVWF  FAD
09CC:  MOVF   x76,W
09CE:  BTFSS  F9E.4
09D0:  BRA    09CE
09D2:  MOVWF  FAD
09D4:  MOVF   x77,W
09D6:  BTFSS  F9E.4
09D8:  BRA    09D6
09DA:  MOVWF  FAD
09DC:  GOTO   0DA8 (RETURN)
09E0:  BTFSC  x72.7
09E2:  BRA    0A04
09E4:  MOVLW  0F
09E6:  MOVWF  00
09E8:  SWAPF  x71,W
09EA:  ANDWF  00,F
09EC:  MOVLW  0A
09EE:  SUBWF  00,W
09F0:  BC    09F8
09F2:  MOVLW  30
09F4:  ADDWF  00,F
09F6:  BRA    09FC
09F8:  MOVF   x72,W
09FA:  ADDWF  00,F
09FC:  MOVF   00,W
09FE:  BTFSS  F9E.4
0A00:  BRA    09FE
0A02:  MOVWF  FAD
0A04:  MOVLW  0F
0A06:  ANDWF  x71,F
0A08:  MOVLW  0A
0A0A:  SUBWF  x71,W
0A0C:  BC    0A12
0A0E:  MOVLW  30
0A10:  BRA    0A16
0A12:  BCF    x72.7
0A14:  MOVF   x72,W
0A16:  ADDWF  x71,F
0A18:  MOVF   x71,W
0A1A:  BTFSS  F9E.4
0A1C:  BRA    0A1A
0A1E:  MOVWF  FAD
0A20:  RETURN 0
0A22:  MOVFF  FEA,79
0A26:  MOVFF  FE9,78
0A2A:  SWAPF  x72,W
0A2C:  IORLW  F0
0A2E:  MOVWF  x74
0A30:  ADDWF  x74,F
0A32:  ADDLW  E2
0A34:  MOVWF  x75
0A36:  ADDLW  32
0A38:  MOVWF  x77
0A3A:  MOVF   x72,W
0A3C:  ANDLW  0F
0A3E:  ADDWF  x75,F
0A40:  ADDWF  x75,F
0A42:  ADDWF  x77,F
0A44:  ADDLW  E9
0A46:  MOVWF  x76
0A48:  ADDWF  x76,F
0A4A:  ADDWF  x76,F
0A4C:  SWAPF  x71,W
0A4E:  ANDLW  0F
0A50:  ADDWF  x76,F
0A52:  ADDWF  x77,F
0A54:  RLCF   x76,F
0A56:  RLCF   x77,F
0A58:  COMF   x77,F
0A5A:  RLCF   x77,F
0A5C:  MOVF   x71,W
0A5E:  ANDLW  0F
0A60:  ADDWF  x77,F
0A62:  RLCF   x74,F
0A64:  MOVLW  07
0A66:  MOVWF  x73
0A68:  MOVLW  0A
0A6A:  DECF   x76,F
0A6C:  ADDWF  x77,F
0A6E:  BNC   0A6A
0A70:  DECF   x75,F
0A72:  ADDWF  x76,F
0A74:  BNC   0A70
0A76:  DECF   x74,F
0A78:  ADDWF  x75,F
0A7A:  BNC   0A76
0A7C:  DECF   x73,F
0A7E:  ADDWF  x74,F
0A80:  BNC   0A7C
0A82:  CLRF   FEA
0A84:  MOVLW  73
0A86:  MOVWF  FE9
0A88:  MOVLW  07
0A8A:  ANDWF  x78,W
0A8C:  BCF    x78.6
0A8E:  ADDWF  FE9,F
0A90:  MOVLW  00
0A92:  ADDWFC FEA,F
0A94:  MOVF   FE9,W
0A96:  SUBLW  77
0A98:  BNZ   0AA0
0A9A:  MOVF   FEA,F
0A9C:  BNZ   0AA0
0A9E:  BSF    x78.6
0AA0:  MOVF   FEF,W
0AA2:  MOVWF  00
0AA4:  BNZ   0AB6
0AA6:  BTFSC  x78.6
0AA8:  BRA    0AB6
0AAA:  BTFSC  x78.4
0AAC:  BRA    0AC6
0AAE:  BTFSC  x78.3
0AB0:  BRA    0AB6
0AB2:  MOVLW  20
0AB4:  BRA    0ABC
0AB6:  BSF    x78.3
0AB8:  BCF    x78.4
0ABA:  MOVLW  30
0ABC:  ADDWF  00,F
0ABE:  MOVF   00,W
0AC0:  BTFSS  F9E.4
0AC2:  BRA    0AC0
0AC4:  MOVWF  FAD
0AC6:  MOVF   FEE,W
0AC8:  BTFSS  x78.6
0ACA:  BRA    0A94
0ACC:  RETURN 0
0ACE:  BTFSC  FD8.1
0AD0:  BRA    0AD8
0AD2:  CLRF   FEA
0AD4:  MOVLW  85
0AD6:  MOVWF  FE9
0AD8:  CLRF   00
0ADA:  CLRF   01
0ADC:  CLRF   02
0ADE:  CLRF   03
0AE0:  CLRF   x85
0AE2:  CLRF   x86
0AE4:  CLRF   x87
0AE6:  CLRF   x88
0AE8:  MOVF   x84,W
0AEA:  IORWF  x83,W
0AEC:  IORWF  x82,W
0AEE:  IORWF  x81,W
0AF0:  BZ    0B4A
0AF2:  MOVLW  20
0AF4:  MOVWF  x89
0AF6:  BCF    FD8.0
0AF8:  RLCF   x7D,F
0AFA:  RLCF   x7E,F
0AFC:  RLCF   x7F,F
0AFE:  RLCF   x80,F
0B00:  RLCF   x85,F
0B02:  RLCF   x86,F
0B04:  RLCF   x87,F
0B06:  RLCF   x88,F
0B08:  MOVF   x84,W
0B0A:  SUBWF  x88,W
0B0C:  BNZ   0B1E
0B0E:  MOVF   x83,W
0B10:  SUBWF  x87,W
0B12:  BNZ   0B1E
0B14:  MOVF   x82,W
0B16:  SUBWF  x86,W
0B18:  BNZ   0B1E
0B1A:  MOVF   x81,W
0B1C:  SUBWF  x85,W
0B1E:  BNC   0B3E
0B20:  MOVF   x81,W
0B22:  SUBWF  x85,F
0B24:  MOVF   x82,W
0B26:  BTFSS  FD8.0
0B28:  INCFSZ x82,W
0B2A:  SUBWF  x86,F
0B2C:  MOVF   x83,W
0B2E:  BTFSS  FD8.0
0B30:  INCFSZ x83,W
0B32:  SUBWF  x87,F
0B34:  MOVF   x84,W
0B36:  BTFSS  FD8.0
0B38:  INCFSZ x84,W
0B3A:  SUBWF  x88,F
0B3C:  BSF    FD8.0
0B3E:  RLCF   00,F
0B40:  RLCF   01,F
0B42:  RLCF   02,F
0B44:  RLCF   03,F
0B46:  DECFSZ x89,F
0B48:  BRA    0AF6
0B4A:  MOVFF  85,FEF
0B4E:  MOVFF  86,FEC
0B52:  MOVFF  87,FEC
0B56:  MOVFF  88,FEC
0B5A:  RETURN 0
0B5C:  MOVF   FE9,W
0B5E:  MOVWF  x75
0B60:  MOVLW  3B
0B62:  MOVWF  x7C
0B64:  MOVLW  9A
0B66:  MOVWF  x7B
0B68:  MOVLW  CA
0B6A:  MOVWF  x7A
0B6C:  CLRF   x79
0B6E:  MOVLW  0A
0B70:  MOVWF  x77
0B72:  BSF    FD8.1
0B74:  CLRF   FEA
0B76:  MOVLW  71
0B78:  MOVWF  FE9
0B7A:  MOVFF  74,80
0B7E:  MOVFF  73,7F
0B82:  MOVFF  72,7E
0B86:  MOVFF  71,7D
0B8A:  MOVFF  7C,84
0B8E:  MOVFF  7B,83
0B92:  MOVFF  7A,82
0B96:  MOVFF  79,81
0B9A:  RCALL  0ACE
0B9C:  MOVF   01,W
0B9E:  MOVF   00,F
0BA0:  BNZ   0BC0
0BA2:  MOVF   x77,W
0BA4:  XORLW  01
0BA6:  BZ    0BC0
0BA8:  MOVF   x75,W
0BAA:  BZ    0BC2
0BAC:  ANDLW  0F
0BAE:  SUBWF  x77,W
0BB0:  BZ    0BB4
0BB2:  BC    0BCE
0BB4:  BTFSC  x75.7
0BB6:  BRA    0BCE
0BB8:  BTFSC  x75.6
0BBA:  BRA    0BC2
0BBC:  MOVLW  20
0BBE:  BRA    0BC4
0BC0:  CLRF   x75
0BC2:  MOVLW  30
0BC4:  ADDWF  00,F
0BC6:  MOVF   00,W
0BC8:  BTFSS  F9E.4
0BCA:  BRA    0BC8
0BCC:  MOVWF  FAD
0BCE:  BCF    FD8.1
0BD0:  MOVFF  7C,80
0BD4:  MOVFF  7B,7F
0BD8:  MOVFF  7A,7E
0BDC:  MOVFF  79,7D
0BE0:  CLRF   x84
0BE2:  CLRF   x83
0BE4:  CLRF   x82
0BE6:  MOVLW  0A
0BE8:  MOVWF  x81
0BEA:  RCALL  0ACE
0BEC:  MOVFF  03,7C
0BF0:  MOVFF  02,7B
0BF4:  MOVFF  01,7A
0BF8:  MOVFF  00,79
0BFC:  DECFSZ x77,F
0BFE:  BRA    0B72
0C00:  RETURN 0
0C02:  MOVF   01,W
0C04:  MOVFF  72,78
0C08:  MOVLW  64
0C0A:  MOVWF  x79
0C0C:  RCALL  0904
0C0E:  MOVFF  00,72
0C12:  MOVF   01,W
0C14:  MOVLW  30
0C16:  BNZ   0C26
0C18:  BTFSS  x73.1
0C1A:  BRA    0C36
0C1C:  BTFSC  x73.3
0C1E:  BRA    0C36
0C20:  BTFSC  x73.4
0C22:  MOVLW  20
0C24:  BRA    0C2C
0C26:  BCF    x73.3
0C28:  BCF    x73.4
0C2A:  BSF    x73.0
0C2C:  ADDWF  01,F
0C2E:  MOVF   01,W
0C30:  BTFSS  F9E.4
0C32:  BRA    0C30
0C34:  MOVWF  FAD
0C36:  MOVFF  72,78
0C3A:  MOVLW  0A
0C3C:  MOVWF  x79
0C3E:  RCALL  0904
0C40:  MOVFF  00,72
0C44:  MOVF   01,W
0C46:  MOVLW  30
0C48:  BNZ   0C56
0C4A:  BTFSC  x73.3
0C4C:  BRA    0C60
0C4E:  BTFSS  x73.0
0C50:  BRA    0C60
0C52:  BTFSC  x73.4
0C54:  MOVLW  20
0C56:  ADDWF  01,F
0C58:  MOVF   01,W
0C5A:  BTFSS  F9E.4
0C5C:  BRA    0C5A
0C5E:  MOVWF  FAD
0C60:  MOVLW  30
0C62:  ADDWF  x72,F
0C64:  MOVF   x72,W
0C66:  BTFSS  F9E.4
0C68:  BRA    0C66
0C6A:  MOVWF  FAD
0C6C:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #device *=16
.................... #use delay(clock=16MHz)
*
0604:  CLRF   FEA
0606:  MOVLW  72
0608:  MOVWF  FE9
060A:  MOVF   FEF,W
060C:  BZ    062A
060E:  MOVLW  05
0610:  MOVWF  01
0612:  CLRF   00
0614:  DECFSZ 00,F
0616:  BRA    0614
0618:  DECFSZ 01,F
061A:  BRA    0612
061C:  MOVLW  2E
061E:  MOVWF  00
0620:  DECFSZ 00,F
0622:  BRA    0620
0624:  BRA    0626
0626:  DECFSZ FEF,F
0628:  BRA    060E
062A:  RETURN 0
.................... 
.................... /* hardware I2C port is slave and is connected to DCSWC bus */
.................... #use i2c(stream=STREAM_SLAVE,SLAVE, I2C1, address=0x34, FORCE_HW)
*
038E:  MOVF   FC9,W
0390:  MOVFF  8D,FC9
0394:  BSF    FC6.4
0396:  BCF    F9E.3
0398:  BTFSC  FC7.0
039A:  BRA    0398
039C:  CLRF   01
039E:  BTFSS  FC5.6
03A0:  INCF   01,F
03A2:  RETURN 0
.................... /* Linux / i2cdetect will use the CCS address >>1. So 0x34 becomes 0x1a */
.................... 
.................... 
.................... 
.................... #fuses HS
.................... #fuses NOPLLEN
.................... #fuses NOFCMEN
.................... #fuses NOIESO
.................... #fuses PUT
.................... #fuses BROWNOUT
.................... #fuses WDT4096
.................... #fuses NOHFOFST
.................... #fuses NOMCLR
.................... #fuses STVREN
.................... #fuses NOLVP
.................... #fuses NOXINST
.................... #fuses NODEBUG
.................... #fuses NOPROTECT
.................... #fuses NOWRT
.................... #fuses NOWRTC 
.................... #fuses NOWRTB
.................... #fuses NOWRTD
.................... #fuses NOEBTR
.................... #fuses NOEBTRB
.................... 
.................... #use standard_io(ALL)
.................... 
.................... #use rs232(UART1,stream=STREAM_FTDI,baud=9600,errors)	
*
08CC:  BTFSS  F9E.5
08CE:  BRA    08CC
08D0:  MOVFF  FAB,19
08D4:  MOVFF  FAE,01
08D8:  BTFSS  19.1
08DA:  BRA    08E0
08DC:  BCF    FAB.4
08DE:  BSF    FAB.4
08E0:  GOTO   0D8A (RETURN)
.................... 
.................... /* program config CRC of 0 and a serial_prefix of 'A' ... that will trigger a write default on first boot */
.................... #ROM 0xF00000 = { 0x00, 0x00, 0x40, 0x00 }
.................... 
.................... 
.................... 
.................... #define COUNT_B              PIN_C5
.................... #define COUNT_A              PIN_C4
.................... #define LED_A                PIN_C3
.................... #define PIC_ADDR_MSB         PIN_C6
.................... #define PIC_ADDR_LSB         PIN_C7
.................... #define SER_TO_PC            PIN_B7
.................... 
.................... #define INA_ALERT            PIN_A2
.................... #define I2C_SW_SDA           PIN_C0
.................... #define I2C_SW_SCL           PIN_C1
.................... #define TP2                  PIN_C2
.................... #define I2C_SDA              PIN_B4
.................... #define SER_FROM_PC          PIN_B5
.................... #define I2C_SCL              PIN_B6
.................... 
.................... 
.................... /* software I2C port is maser and is connected to two INA228A */
.................... #use i2c(stream=STREAM_MASTER, MASTER, FAST, FORCE_SW, scl=I2C_SW_SCL, sda=I2C_SW_SDA)
*
0670:  MOVLW  08
0672:  MOVWF  01
0674:  NOP   
0676:  BCF    F8B.1
0678:  BCF    F94.1
067A:  NOP   
067C:  RLCF   x78,F
067E:  BCF    F8B.0
0680:  BTFSC  FD8.0
0682:  BSF    F94.0
0684:  BTFSS  FD8.0
0686:  BCF    F94.0
0688:  BSF    F94.1
068A:  BTFSS  F82.1
068C:  BRA    068A
068E:  DECFSZ 01,F
0690:  BRA    0674
0692:  NOP   
0694:  BCF    F8B.1
0696:  BCF    F94.1
0698:  NOP   
069A:  BSF    F94.0
069C:  NOP   
069E:  NOP   
06A0:  BSF    F94.1
06A2:  BTFSS  F82.1
06A4:  BRA    06A2
06A6:  CLRF   01
06A8:  NOP   
06AA:  BTFSC  F82.0
06AC:  BSF    01.0
06AE:  BCF    F8B.1
06B0:  BCF    F94.1
06B2:  BCF    F8B.0
06B4:  BCF    F94.0
06B6:  RETURN 0
06B8:  MOVLW  08
06BA:  MOVWF  x7A
06BC:  MOVFF  00,7B
06C0:  BSF    F94.0
06C2:  NOP   
06C4:  BSF    F94.1
06C6:  BTFSS  F82.1
06C8:  BRA    06C6
06CA:  BTFSC  F82.0
06CC:  BSF    FD8.0
06CE:  BTFSS  F82.0
06D0:  BCF    FD8.0
06D2:  RLCF   01,F
06D4:  NOP   
06D6:  BCF    F94.1
06D8:  BCF    F8B.1
06DA:  DECFSZ x7A,F
06DC:  BRA    06C0
06DE:  BSF    F94.0
06E0:  NOP   
06E2:  BCF    F8B.0
06E4:  MOVF   x7B,W
06E6:  BTFSS  FD8.2
06E8:  BCF    F94.0
06EA:  NOP   
06EC:  BSF    F94.1
06EE:  BTFSS  F82.1
06F0:  BRA    06EE
06F2:  NOP   
06F4:  BCF    F8B.1
06F6:  BCF    F94.1
06F8:  NOP   
06FA:  BCF    F8B.0
06FC:  BCF    F94.0
06FE:  RETURN 0
.................... 
.................... 
.................... 
.................... #define INA228_A_ADDR      0x80
.................... #define INA228_B_ADDR      0x9a
.................... 
.................... 
.................... 
.................... 
.................... typedef struct {
.................... 	int8 serial_prefix;
.................... 	int16 serial_number;
.................... 	int16 startup_power_on_delay;
.................... } struct_config;
.................... 
.................... 
.................... 
.................... typedef struct {
.................... 	int32 vbus_a, vshunt_a;
.................... 	int32 vbus_b, vshunt_b;
.................... 
.................... 	int16 count_a_last_second, count_b_last_second;
.................... 
.................... 	int32 count_a_long;
.................... 	int32 count_b_long;
.................... 	int32 count_seconds_long;
.................... 
.................... 	int16 dietemp_a;
.................... 	int16 dietemp_b;
.................... } struct_current;
.................... 
.................... typedef struct {
.................... 	/* action flags */
.................... 	int1 now_millisecond;
.................... 
.................... 	int1 now_ina;    // query ina registers
.................... 
.................... 	/* timers */
.................... 	int8 led_on_a;
.................... } struct_time_keep;
.................... 
.................... /* global structures */
.................... struct_current current={0};
.................... struct_current next={0};
.................... struct_time_keep timers={0};
.................... 
.................... #include "ina228.c"
.................... #define INA228_REG_CONFIG       0x00  // 16 bits, configuration
.................... #define INA228_REG_ADC_CONFIG   0x01  // 16 bits, ADC configuration
.................... #define INA228_REG_SHUNT_CAL    0x02  // 16 bits, shunt calibration
.................... #define INA228_REG_SHUNT_TEMPCO 0x03  // 16 bits, shunt temperature coefficient
.................... #define INA228_REG_VSHUNT       0x04  // 24 bits, shunt voltage measurement
.................... #define INA228_REG_VBUS         0x05  // 24 bits, bus voltage measurement
.................... #define INA228_REG_DIETEMP      0x06  // 16 bits, temperature measurement
.................... #define INA228_REG_CURRENT      0x07  // 24 bits, current result
.................... #define INA228_REG_POWER        0x08  // 24 bits, power result 
.................... #define INA228_REG_ENERGY       0x09  // 40 bits, energy result
.................... #define INA228_REG_CHARGE       0x0a  // 40 bits, charge result
.................... #define INA228_REG_DIAG_ALRT    0x0b  // 16 bits, diagnostic flags and alert
.................... #define INA228_REG_SOVL         0x0c  // 16 bits, shunt overvoltage threshold
.................... #define INA228_REG_SUVL         0x0d  // 16 bits, shunt undervoltage threshold
.................... #define INA228_REG_BOVL         0x0e  // 16 bits, bus overvoltage threshold
.................... #define INA228_REG_BUVL         0x0f  // 16 bits, bus undervoltage threshold
.................... #define INA228_REG_TEMP_LIMIT   0x10  // 16 bits, temperature over-limit threshold
.................... #define INA228_REG_PWR_LIMIT    0x11  // 16 bits, power over-limit threshold
.................... #define INA228_REG_MFG_ID       0x3e  // 16 bits, manufacturer ID
.................... #define INA228_REG_DEVICE_ID    0x3f  // 16 bits, device ID
.................... 
.................... #define INA228_I2C_WRITE        0x00
.................... #define INA228_I2C_READ         0x01 
.................... 
.................... 
.................... int16 ina228_read16(int8 i2c_address, int8 regaddr) {
.................... 	int16 data;
.................... 
.................... 	i2c_start(STREAM_MASTER);
*
079E:  BSF    F94.0
07A0:  NOP   
07A2:  BSF    F94.1
07A4:  NOP   
07A6:  BCF    F8B.0
07A8:  BCF    F94.0
07AA:  NOP   
07AC:  BCF    F8B.1
07AE:  BCF    F94.1
.................... 	delay_us(15);
07B0:  MOVLW  13
07B2:  MOVWF  00
07B4:  DECFSZ 00,F
07B6:  BRA    07B4
07B8:  BRA    07BA
.................... 	i2c_write(STREAM_MASTER,i2c_address);
07BA:  MOVFF  71,78
07BE:  RCALL  0670
.................... 	i2c_write(STREAM_MASTER,regaddr);
07C0:  MOVFF  72,78
07C4:  RCALL  0670
.................... 	i2c_start(STREAM_MASTER);
07C6:  BSF    F94.0
07C8:  NOP   
07CA:  BSF    F94.1
07CC:  NOP   
07CE:  BTFSS  F82.1
07D0:  BRA    07CE
07D2:  BCF    F8B.0
07D4:  BCF    F94.0
07D6:  NOP   
07D8:  BCF    F8B.1
07DA:  BCF    F94.1
.................... 	delay_us(15);
07DC:  MOVLW  13
07DE:  MOVWF  00
07E0:  DECFSZ 00,F
07E2:  BRA    07E0
07E4:  BRA    07E6
.................... 	i2c_write(STREAM_MASTER,i2c_address | INA228_I2C_READ);  // read cycle
07E6:  MOVF   x71,W
07E8:  IORLW  01
07EA:  MOVWF  x75
07EC:  MOVWF  x78
07EE:  RCALL  0670
.................... 	data=make16(i2c_read(STREAM_MASTER,1),i2c_read(STREAM_MASTER,0));                                 
07F0:  MOVLW  01
07F2:  MOVWF  00
07F4:  RCALL  06B8
07F6:  MOVFF  01,75
07FA:  CLRF   00
07FC:  RCALL  06B8
07FE:  MOVFF  75,74
0802:  MOVFF  01,73
.................... 	i2c_stop(STREAM_MASTER);
0806:  BCF    F94.0
0808:  NOP   
080A:  BSF    F94.1
080C:  BTFSS  F82.1
080E:  BRA    080C
0810:  NOP   
0812:  BRA    0814
0814:  NOP   
0816:  BSF    F94.0
0818:  NOP   
.................... 
.................... 	return data;
081A:  MOVFF  73,01
081E:  MOVFF  74,02
0822:  RETURN 0
.................... }
.................... 
.................... int32 ina228_read24(int8 i2c_address, int8 regaddr) {
.................... 	int32 data;
.................... 
.................... 	i2c_start(STREAM_MASTER);
*
0700:  BSF    F94.0
0702:  NOP   
0704:  BSF    F94.1
0706:  NOP   
0708:  BCF    F8B.0
070A:  BCF    F94.0
070C:  NOP   
070E:  BCF    F8B.1
0710:  BCF    F94.1
.................... 	delay_us(15);
0712:  MOVLW  13
0714:  MOVWF  00
0716:  DECFSZ 00,F
0718:  BRA    0716
071A:  BRA    071C
.................... 	i2c_write(STREAM_MASTER,i2c_address);
071C:  MOVFF  71,78
0720:  RCALL  0670
.................... 	i2c_write(STREAM_MASTER,regaddr);
0722:  MOVFF  72,78
0726:  RCALL  0670
.................... 	i2c_start(STREAM_MASTER);
0728:  BSF    F94.0
072A:  NOP   
072C:  BSF    F94.1
072E:  NOP   
0730:  BTFSS  F82.1
0732:  BRA    0730
0734:  BCF    F8B.0
0736:  BCF    F94.0
0738:  NOP   
073A:  BCF    F8B.1
073C:  BCF    F94.1
.................... 	delay_us(15);
073E:  MOVLW  13
0740:  MOVWF  00
0742:  DECFSZ 00,F
0744:  BRA    0742
0746:  BRA    0748
.................... 	i2c_write(STREAM_MASTER,i2c_address | INA228_I2C_READ);  // read cycle
0748:  MOVF   x71,W
074A:  IORLW  01
074C:  MOVWF  x77
074E:  MOVWF  x78
0750:  RCALL  0670
.................... 	data=make32(0,i2c_read(STREAM_MASTER,1),i2c_read(STREAM_MASTER,1),i2c_read(STREAM_MASTER,0));
0752:  MOVLW  01
0754:  MOVWF  00
0756:  RCALL  06B8
0758:  MOVFF  01,77
075C:  MOVLW  01
075E:  MOVWF  00
0760:  RCALL  06B8
0762:  MOVFF  01,78
0766:  CLRF   00
0768:  RCALL  06B8
076A:  CLRF   x76
076C:  MOVFF  77,75
0770:  MOVFF  78,74
0774:  MOVFF  01,73
.................... 	i2c_stop(STREAM_MASTER);
0778:  BCF    F94.0
077A:  NOP   
077C:  BSF    F94.1
077E:  BTFSS  F82.1
0780:  BRA    077E
0782:  NOP   
0784:  BRA    0786
0786:  NOP   
0788:  BSF    F94.0
078A:  NOP   
.................... 
.................... 	return data;
078C:  MOVFF  73,00
0790:  MOVFF  74,01
0794:  MOVFF  75,02
0798:  MOVFF  76,03
079C:  RETURN 0
.................... }
.................... 
.................... void ina228_write16(int8 i2c_address, int8 regaddr, int16 value) {
.................... 	i2c_start(STREAM_MASTER);
.................... 	delay_us(15);                                                 
.................... 	i2c_write(STREAM_MASTER,i2c_address); // write cycle                       
.................... 	i2c_write(STREAM_MASTER,regaddr);  // write cycle         
.................... 	i2c_write(STREAM_MASTER,make8(value,1));
.................... 	i2c_write(STREAM_MASTER,make8(value,0));
.................... 	i2c_stop(STREAM_MASTER);
.................... }
.................... 
.................... void ina228_init(int8 i2c_address) {
.................... 	ina228_write16(i2c_address,INA228_REG_CONFIG,0b1000000000000000);
.................... }
.................... 
.................... #include "i2c_handler_dcswc_module_voltage_current_counter.c"
.................... #include "registers_dcswc_module_voltage_current_counter.h"
.................... /* 32 bit INA228 bus and shunt voltages */
.................... #define I2C_REG_VBUS_A_MSW                    0
.................... #define I2C_REG_VBUS_A_LSW                    1
.................... #define I2C_REG_VSHUNT_A_MSW                  2
.................... #define I2C_REG_VSHUNT_A_LSW                  3
.................... 
.................... #define I2C_REG_VBUS_B_MSW                    4
.................... #define I2C_REG_VBUS_B_LSW                    5
.................... #define I2C_REG_VSHUNT_B_MSW                  6
.................... #define I2C_REG_VSHUNT_B_LSW                  7
.................... 
.................... /* 16 bit count of last (not current) second */
.................... #define I2C_REG_COUNT_A_LAST_SECOND           8
.................... #define I2C_REG_COUNT_B_LAST_SECOND           9
.................... 
.................... /* 32 bit count since reset */
.................... #define I2C_REG_COUNT_A_LONG_MSW              10
.................... #define I2C_REG_COUNT_A_LONG_LSW              11
.................... #define I2C_REG_COUNT_B_LONG_MSW              12
.................... #define I2C_REG_COUNT_B_LONG_LSW              13
.................... 
.................... /* 32 bit seconds since count reset */
.................... #define I2C_REG_COUNT_LONG_SECONDS_MSW        14
.................... #define I2C_REG_COUNT_LONG_SECONDS_LSW        15
.................... 
.................... /* 16 bit INA228 die temperatures */
.................... #define I2C_REG_DIETEMP_A                     16
.................... #define I2C_REG_DIETEMP_B                     17
.................... 
.................... 
.................... 
.................... void write_i2c(int8 address, int16 value) {
.................... 	
.................... 	switch ( address ) {
*
01BA:  MOVF   x8E,W
01BC:  XORLW  0E
01BE:  BZ    01C6
01C0:  XORLW  01
01C2:  BZ    01C6
01C4:  BRA    01DE
.................... 		/* write anything to either of these addresses and we reset the long counter */
.................... 		case I2C_REG_COUNT_LONG_SECONDS_MSW:
.................... 		case I2C_REG_COUNT_LONG_SECONDS_LSW:
.................... 			current.count_a_long=0;
01C6:  CLRF   31
01C8:  CLRF   30
01CA:  CLRF   2F
01CC:  CLRF   2E
.................... 			current.count_b_long=0;
01CE:  CLRF   35
01D0:  CLRF   34
01D2:  CLRF   33
01D4:  CLRF   32
.................... 			current.count_seconds_long=0;
01D6:  CLRF   39
01D8:  CLRF   38
01DA:  CLRF   37
01DC:  CLRF   36
.................... 			break;
.................... 
....................  
.................... 		default:
.................... 			/* do nothing */
.................... 	}
01DE:  GOTO   041E (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... int16 map_i2c(int8 addr) {
.................... 	static int16 lsw=0xffff;
.................... 
.................... 	timers.led_on_a=100;
01E2:  MOVLW  64
01E4:  MOVWF  x63
.................... 
.................... 
.................... 
.................... 	switch ( addr ) {
01E6:  MOVF   x8D,W
01E8:  BZ    0244
01EA:  XORLW  01
01EC:  BZ    0262
01EE:  XORLW  03
01F0:  BZ    026C
01F2:  XORLW  01
01F4:  BZ    028A
01F6:  XORLW  07
01F8:  BZ    0294
01FA:  XORLW  01
01FC:  BZ    02B2
01FE:  XORLW  03
0200:  BZ    02BC
0202:  XORLW  01
0204:  BZ    02DA
0206:  XORLW  0F
0208:  BTFSC  FD8.2
020A:  BRA    02E4
020C:  XORLW  01
020E:  BTFSC  FD8.2
0210:  BRA    02EE
0212:  XORLW  03
0214:  BTFSC  FD8.2
0216:  BRA    02F8
0218:  XORLW  01
021A:  BTFSC  FD8.2
021C:  BRA    0316
021E:  XORLW  07
0220:  BTFSC  FD8.2
0222:  BRA    0320
0224:  XORLW  01
0226:  BTFSC  FD8.2
0228:  BRA    033E
022A:  XORLW  03
022C:  BTFSC  FD8.2
022E:  BRA    0348
0230:  XORLW  01
0232:  BTFSC  FD8.2
0234:  BRA    0366
0236:  XORLW  1F
0238:  BTFSC  FD8.2
023A:  BRA    0370
023C:  XORLW  01
023E:  BTFSC  FD8.2
0240:  BRA    037A
0242:  BRA    0384
.................... 		/* 32 bit variables have the most significant word read first and that sets the
.................... 		   least sinificant word which can be read next. _LSW registers are only valid if
.................... 		   they are preceeded by a read on the matching _MSW register
.................... 		 */
.................... 		case I2C_REG_VBUS_A_MSW:
.................... 			lsw = make16(make8(current.vbus_a,1),make8(current.vbus_a,0));
0244:  MOVFF  1B,65
0248:  MOVFF  1A,64
.................... 			return (int16) make16(make8(current.vbus_a,3),make8(current.vbus_a,2));
024C:  MOVFF  1D,8E
0250:  MOVFF  1C,8F
0254:  MOVFF  1D,03
0258:  MOVFF  1C,01
025C:  MOVFF  1D,02
0260:  BRA    038A
.................... 		case I2C_REG_VBUS_A_LSW:
.................... 			return (int16) lsw;
0262:  MOVFF  64,01
0266:  MOVFF  65,02
026A:  BRA    038A
.................... 		case I2C_REG_VSHUNT_A_MSW:
.................... 			lsw = make16(make8(current.vshunt_a,1),make8(current.vshunt_a,0));
026C:  MOVFF  1F,65
0270:  MOVFF  1E,64
.................... 			return (int16) make16(make8(current.vshunt_a,3),make8(current.vshunt_a,2));
0274:  MOVFF  21,8E
0278:  MOVFF  20,8F
027C:  MOVFF  21,03
0280:  MOVFF  20,01
0284:  MOVFF  21,02
0288:  BRA    038A
.................... 		case I2C_REG_VSHUNT_A_LSW:
.................... 			return (int16) lsw;    
028A:  MOVFF  64,01
028E:  MOVFF  65,02
0292:  BRA    038A
.................... 
.................... 		case I2C_REG_VBUS_B_MSW:
.................... 			lsw = make16(make8(current.vbus_a,1),make8(current.vbus_a,0));
0294:  MOVFF  1B,65
0298:  MOVFF  1A,64
.................... 			return (int16) make16(make8(current.vbus_b,3),make8(current.vbus_b,2));
029C:  MOVFF  25,8E
02A0:  MOVFF  24,8F
02A4:  MOVFF  25,03
02A8:  MOVFF  24,01
02AC:  MOVFF  25,02
02B0:  BRA    038A
.................... 		case I2C_REG_VBUS_B_LSW:
.................... 			return (int16) lsw;
02B2:  MOVFF  64,01
02B6:  MOVFF  65,02
02BA:  BRA    038A
.................... 		case I2C_REG_VSHUNT_B_MSW:
.................... 			lsw = make16(make8(current.vshunt_b,1),make8(current.vshunt_b,0));
02BC:  MOVFF  27,65
02C0:  MOVFF  26,64
.................... 			return (int16) make16(make8(current.vshunt_b,3),make8(current.vshunt_b,2));
02C4:  MOVFF  29,8E
02C8:  MOVFF  28,8F
02CC:  MOVFF  29,03
02D0:  MOVFF  28,01
02D4:  MOVFF  29,02
02D8:  BRA    038A
.................... 		case I2C_REG_VSHUNT_B_LSW:
.................... 			return (int16) lsw;    
02DA:  MOVFF  64,01
02DE:  MOVFF  65,02
02E2:  BRA    038A
.................... 
.................... 
.................... 		case I2C_REG_COUNT_A_LAST_SECOND:
.................... 			return (int16) current.count_a_last_second;
02E4:  MOVFF  2A,01
02E8:  MOVFF  2B,02
02EC:  BRA    038A
.................... 		case I2C_REG_COUNT_B_LAST_SECOND:
.................... 			return (int16) current.count_b_last_second;
02EE:  MOVFF  2C,01
02F2:  MOVFF  2D,02
02F6:  BRA    038A
.................... 
.................... 		case I2C_REG_COUNT_A_LONG_MSW:
.................... 			lsw = make16(make8(current.count_a_long,1),make8(current.count_a_long,0));
02F8:  MOVFF  2F,65
02FC:  MOVFF  2E,64
.................... 			return (int16) make16(make8(current.count_a_long,3),make8(current.count_a_long,2));
0300:  MOVFF  31,8E
0304:  MOVFF  30,8F
0308:  MOVFF  31,03
030C:  MOVFF  30,01
0310:  MOVFF  31,02
0314:  BRA    038A
.................... 		case I2C_REG_COUNT_A_LONG_LSW:
.................... 			return (int16) lsw;
0316:  MOVFF  64,01
031A:  MOVFF  65,02
031E:  BRA    038A
.................... 		case I2C_REG_COUNT_B_LONG_MSW:
.................... 			lsw = make16(make8(current.count_b_long,1),make8(current.count_b_long,0));
0320:  MOVFF  33,65
0324:  MOVFF  32,64
.................... 			return (int16) make16(make8(current.count_b_long,3),make8(current.count_b_long,2));
0328:  MOVFF  35,8E
032C:  MOVFF  34,8F
0330:  MOVFF  35,03
0334:  MOVFF  34,01
0338:  MOVFF  35,02
033C:  BRA    038A
.................... 		case I2C_REG_COUNT_B_LONG_LSW:
.................... 			return (int16) lsw;
033E:  MOVFF  64,01
0342:  MOVFF  65,02
0346:  BRA    038A
.................... 		case I2C_REG_COUNT_LONG_SECONDS_MSW:
.................... 			lsw = make16(make8(current.count_seconds_long,1),make8(current.count_seconds_long,0));
0348:  MOVFF  37,65
034C:  MOVFF  36,64
.................... 			return (int16) make16(make8(current.count_seconds_long,3),make8(current.count_seconds_long,2));
0350:  MOVFF  39,8E
0354:  MOVFF  38,8F
0358:  MOVFF  39,03
035C:  MOVFF  38,01
0360:  MOVFF  39,02
0364:  BRA    038A
.................... 		case I2C_REG_COUNT_LONG_SECONDS_LSW:
.................... 			return (int16) lsw;
0366:  MOVFF  64,01
036A:  MOVFF  65,02
036E:  BRA    038A
.................... 
.................... 		case I2C_REG_DIETEMP_A:
.................... 			return (int16) current.dietemp_a;
0370:  MOVFF  3A,01
0374:  MOVFF  3B,02
0378:  BRA    038A
.................... 		case I2C_REG_DIETEMP_B:
.................... 			return (int16) current.dietemp_b;
037A:  MOVFF  3C,01
037E:  MOVFF  3D,02
0382:  BRA    038A
.................... 
.................... 		/* we should have range checked, and never gotten here ... or read unimplemented (future) register */
.................... 		default: return (int16) addr;
0384:  MOVFF  8D,01
0388:  CLRF   02
.................... 	}
038A:  GOTO   0432 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "interrupt_dcswc_module_voltage_current_counter.c"
.................... #int_timer2
.................... void isr_timer2() {
.................... 	static int16 ticks=0;
.................... 	static short count_a_last=0;
.................... 	static short count_b_last=0;
.................... 	short count_a_now;
.................... 	short count_b_now;
.................... 
.................... 
.................... 	/* external input counting */
.................... 	count_a_now=input(COUNT_A);
*
00BA:  BSF    F94.4
00BC:  BCF    x8A.0
00BE:  BTFSC  F82.4
00C0:  BSF    x8A.0
.................... 	if ( 0 == count_a_now && 1 == count_a_last ) {
00C2:  BTFSC  x8A.0
00C4:  BRA    00D0
00C6:  BTFSS  x68.0
00C8:  BRA    00D0
.................... 		next.count_a_last_second++;
00CA:  INCF   4E,F
00CC:  BTFSC  FD8.2
00CE:  INCF   4F,F
.................... 	}
.................... 	count_a_last=count_a_now;
00D0:  BCF    x68.0
00D2:  BTFSC  x8A.0
00D4:  BSF    x68.0
.................... 
.................... 	count_b_now=input(COUNT_B);
00D6:  BSF    F94.5
00D8:  BCF    x8A.1
00DA:  BTFSC  F82.5
00DC:  BSF    x8A.1
.................... 	if ( 0 == count_b_now && 1 == count_b_last ) {
00DE:  BTFSC  x8A.1
00E0:  BRA    00EC
00E2:  BTFSS  x68.1
00E4:  BRA    00EC
.................... 		next.count_b_last_second++;
00E6:  INCF   50,F
00E8:  BTFSC  FD8.2
00EA:  INCF   51,F
.................... 	}
.................... 	count_b_last=count_b_now;
00EC:  BCF    x68.1
00EE:  BTFSC  x8A.1
00F0:  BSF    x68.1
.................... 
.................... 
.................... 	/* timing */
.................... 
.................... 	timers.now_millisecond=1;
00F2:  BSF    x62.0
.................... 
.................... 	ticks++;
00F4:  INCF   x66,F
00F6:  BTFSC  FD8.2
00F8:  INCF   x67,F
.................... 	if ( 500 == ticks ) {
00FA:  MOVF   x66,W
00FC:  SUBLW  F4
00FE:  BNZ   0108
0100:  DECFSZ x67,W
0102:  BRA    0108
.................... 		timers.now_ina=1;
0104:  BSF    x62.1
.................... 	} else if ( 1000 == ticks ) {
0106:  BRA    01B0
0108:  MOVF   x66,W
010A:  SUBLW  E8
010C:  BNZ   01B0
010E:  MOVF   x67,W
0110:  SUBLW  03
0112:  BNZ   01B0
.................... //		timers.now_strobe=1;
.................... 		output_high(TP2);
0114:  BCF    F94.2
0116:  BSF    F8B.2
.................... 
.................... 		current.vbus_a=next.vbus_a;
0118:  MOVFF  41,1D
011C:  MOVFF  40,1C
0120:  MOVFF  3F,1B
0124:  MOVFF  3E,1A
.................... 		current.vshunt_a=next.vshunt_a;
0128:  MOVFF  45,21
012C:  MOVFF  44,20
0130:  MOVFF  43,1F
0134:  MOVFF  42,1E
.................... 		current.dietemp_a=next.dietemp_a;	
0138:  MOVFF  5F,3B
013C:  MOVFF  5E,3A
.................... 
.................... 		current.vbus_b=next.vbus_b;
0140:  MOVFF  49,25
0144:  MOVFF  48,24
0148:  MOVFF  47,23
014C:  MOVFF  46,22
.................... 		current.vshunt_b=next.vshunt_b;
0150:  MOVFF  4D,29
0154:  MOVFF  4C,28
0158:  MOVFF  4B,27
015C:  MOVFF  4A,26
.................... 		current.dietemp_b=next.dietemp_b;
0160:  MOVFF  61,3D
0164:  MOVFF  60,3C
.................... 
.................... 		current.count_a_last_second=next.count_a_last_second;
0168:  MOVFF  4F,2B
016C:  MOVFF  4E,2A
.................... 
.................... 		current.count_b_last_second=next.count_b_last_second;	
0170:  MOVFF  51,2D
0174:  MOVFF  50,2C
.................... 
.................... 		current.count_a_long += current.count_a_last_second;
0178:  MOVF   2A,W
017A:  ADDWF  2E,F
017C:  MOVF   2B,W
017E:  ADDWFC 2F,F
0180:  MOVLW  00
0182:  ADDWFC 30,F
0184:  ADDWFC 31,F
.................... 		current.count_b_long += current.count_b_last_second;
0186:  MOVF   2C,W
0188:  ADDWF  32,F
018A:  MOVF   2D,W
018C:  ADDWFC 33,F
018E:  MOVLW  00
0190:  ADDWFC 34,F
0192:  ADDWFC 35,F
.................... 	
.................... 		current.count_seconds_long++;
0194:  MOVLW  01
0196:  ADDWF  36,F
0198:  BTFSC  FD8.0
019A:  INCF   37,F
019C:  BTFSC  FD8.2
019E:  INCF   38,F
01A0:  BTFSC  FD8.2
01A2:  INCF   39,F
.................... 
.................... 		/* reset our counters */
.................... 		next.count_a_last_second=0;
01A4:  CLRF   4F
01A6:  CLRF   4E
.................... 		next.count_b_last_second=0;
01A8:  CLRF   51
01AA:  CLRF   50
.................... 
.................... 		ticks=0;
01AC:  CLRF   x67
01AE:  CLRF   x66
.................... 	}
.................... 
.................... 	output_low(TP2);
01B0:  BCF    F94.2
01B2:  BCF    F8B.2
.................... }
.................... 
.................... 
.................... 
.................... #if 1
.................... 
.................... 	/*
.................... .................... 	state = i2c_isr_state();
.................... *
.................... 025A:  BTFSC  FC7.5	// if data, go to 0264
.................... 025C:  BRA    0264
.................... 
.................... 025E:  CLRF   x9D	// set i=0 
.................... 
.................... 0260:  BTFSC  FC7.2	// if read, then set high bit of i 
.................... 0262:  BSF    x9D.7
.................... 
.................... 0264:  MOVF   x9D,W // increment i and put result in state
.................... 0266:  INCF   x9D,F
.................... 0268:  MOVWF  xC7
.................... 
.................... 	x9D is static variable for state
.................... 	xC7 is returned value of state
.................... */
.................... 
.................... /*
.................... .................... 	state = i2c_isr_state();
.................... 025A:  BTFSC  FC7.5 // bit test SSPSTAT.5, skip instruction below if DATA/!ADDRESS is indicating address
.................... 025C:  BRA    0264  // goto 0264
.................... 
.................... 025E:  CLRF   x9F   // set x9F to 0
.................... 0260:  BTFSC  FC7.2 // bit test SSPSTAT.2, skip instruction below if READ/!WRITE is indicating write
.................... 0262:  BSF    x9F.7 // set the high bit of x9F
.................... 
.................... 0264:  MOVF   x9F,W	// move x9F to W register
.................... 0266:  INCF   x9F,F // increment x9F
.................... 0268:  MOVWF  x9A	// move W to x9A (ie move x9F to x9A)
.................... 
.................... that makes 9a the value of state that is used by the program and x9F as a static state variable
.................... */
.................... 
.................... 
01B4:  BCF    F9E.1
01B6:  GOTO   006C
.................... #byte SSPSTAT=GETENV("SFR:SSPSTAT")
.................... #INT_SSP
.................... void ssp_interrupt () {
.................... 	static int8 sstate;
.................... 	int8 state;
.................... 	int8 incoming;
.................... 	static int16 lastValue;
.................... 	static int8 lastMSB;
.................... 	static int8 address;
.................... 
.................... 
.................... //	state = i2c_isr_state(STREAM_SLAVE);
.................... 
.................... 
.................... 	/* 
.................... 	our implementation of i2c_isr_state() that won't overflow and switch states
.................... 
.................... 	but it will quit counting at 127 bytes. 
.................... 
.................... 	If more bytes are needed, external counting variables can be used or the size of state can be made larger
.................... 	*/
.................... 
.................... 
.................... 	if ( ! bit_test(SSPSTAT,5) ) {
*
03A4:  BTFSC  FC7.5
03A6:  BRA    03B0
.................... 		/* address */
.................... 		sstate=0;
03A8:  CLRF   x69
.................... 
.................... 		if ( bit_test(SSPSTAT,2) ) {
03AA:  BTFSS  FC7.2
03AC:  BRA    03B0
.................... 			/* set high bit if read */
.................... 			bit_set(sstate,7);
03AE:  BSF    x69.7
.................... 		}
.................... 	} else {
.................... 		/* data */
.................... 	}
.................... 
.................... 	/* state variable used below is not incremented */
.................... 	state=sstate;
03B0:  MOVFF  69,8A
.................... 
.................... 	/* increment the state counter for next pass through unless it will overflow us into another state */
.................... 	if ( sstate != 0x7f && sstate != 0xff) {
03B4:  MOVF   x69,W
03B6:  SUBLW  7F
03B8:  BZ    03C2
03BA:  INCFSZ x69,W
03BC:  BRA    03C0
03BE:  BRA    03C2
.................... 		sstate++;
03C0:  INCF   x69,F
.................... 	}
.................... 
.................... 	
.................... 	/* i2c_isr_state() return an 8 bit int
.................... 		0 - Address match received with R/W bit clear, perform i2c_read( ) to read the I2C address.
.................... 
.................... 		1-0x7F - Master has written data; i2c_read() will immediately return the data
.................... 
.................... 		0x80 - Address match received with R/W bit set; perform i2c_read( ) to read the I2C address,
.................... 		and use i2c_write( ) to pre-load the transmit buffer for the next transaction (next I2C read
.................... 		performed by master will read this byte).
.................... 
.................... 		0x81-0xFF - Transmission completed and acknowledged; respond with i2c_write() to pre-load
.................... 		the transmit buffer for the next transition (the next I2C read performed by master will read this
.................... 		byte).
.................... 
.................... 		Function:
.................... 		Returns the state of I2C communications in I2C slave mode after an SSP interrupt. The return
.................... 		value increments with each byte received or sent.
.................... 		If 0x00 or 0x80 is returned, an i2C_read( ) needs to be performed to read the I2C address that
.................... 		was sent (it will match the address configured by #USE I2C so this value can be ignored)
.................... 	*/
.................... 
.................... 	if ( state <= 0x80 ) {                      
03C2:  MOVF   x8A,W
03C4:  SUBLW  80
03C6:  BNC   041E
.................... 		/* I2C master is sending us data */
.................... 		if ( 0x80 == state ) {
03C8:  MOVF   x8A,W
03CA:  SUBLW  80
03CC:  BNZ   03D4
.................... 			/* i2c_read(2) casues the function to read the SSPBUF without releasing the clock */
.................... 			incoming = i2c_read(STREAM_SLAVE,2);
03CE:  MOVFF  FC9,8B
.................... 		} else {
03D2:  BRA    03E0
.................... 			incoming = i2c_read(STREAM_SLAVE);
03D4:  BCF    FC6.6
03D6:  BTFSS  FC7.0
03D8:  BRA    03D6
03DA:  MOVF   FC9,W
03DC:  BSF    FC6.4
03DE:  MOVWF  x8B
.................... 		}
.................... 
.................... 		if ( 1 == state ) {      
03E0:  DECFSZ x8A,W
03E2:  BRA    03EA
.................... 			/* first byte is address */                
.................... 			address = incoming;
03E4:  MOVFF  8B,6D
.................... 		} else if ( state >= 2 && 0x80 != state ) {
03E8:  BRA    041E
03EA:  MOVF   x8A,W
03EC:  SUBLW  01
03EE:  BC    041E
03F0:  MOVF   x8A,W
03F2:  SUBLW  80
03F4:  BZ    041E
.................... 			/* received byte is data */
.................... 		
.................... 			/* save MSB and we'll process it on next */
.................... 			if ( 2 == state ) {
03F6:  MOVF   x8A,W
03F8:  SUBLW  02
03FA:  BNZ   0402
.................... 				lastMSB=incoming;
03FC:  MOVFF  8B,6C
.................... 			} else if ( 3 == state ) {
0400:  BRA    041E
0402:  MOVF   x8A,W
0404:  SUBLW  03
0406:  BNZ   041E
.................... 				/* 16 bit value made of previous byte and this byte */
.................... 				write_i2c(address,make16(lastMSB,incoming));
0408:  MOVFF  6C,8D
040C:  MOVFF  8B,8C
0410:  MOVFF  6D,8E
0414:  MOVFF  6C,90
0418:  MOVFF  8B,8F
041C:  BRA    01BA
.................... 			}
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	if ( state >= 0x80 ) {
041E:  MOVF   x8A,W
0420:  SUBLW  7F
0422:  BC    0452
.................... 		/* I2C master is requesting data from us */
.................... 
.................... 		if ( ! bit_test(address,0) ) {
0424:  BTFSC  x6D.0
0426:  BRA    0446
.................... 			/* read 16 bit register (register address half of I2C address) on even address */
.................... 			lastValue=map_i2c(address>>1);
0428:  BCF    FD8.0
042A:  RRCF   x6D,W
042C:  MOVWF  x8C
042E:  MOVWF  x8D
0430:  BRA    01E2
0432:  MOVFF  02,6B
0436:  MOVFF  01,6A
.................... 
.................... 			/* send the MSB */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,1));
043A:  MOVFF  6B,8C
043E:  MOVFF  6B,8D
0442:  RCALL  038E
.................... 		} else {
0444:  BRA    0450
.................... 			/* send LSB of 16 bit register on odd address */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,0));
0446:  MOVFF  6A,8C
044A:  MOVFF  6A,8D
044E:  RCALL  038E
.................... 		}
.................... 
.................... 		address++;
0450:  INCF   x6D,F
.................... 	}
.................... 
.................... 	/* reset watchdog timer */
.................... //	timers.read_watchdog_seconds=0;
.................... }
0452:  BCF    F9E.3
0454:  GOTO   006C
.................... #endif
.................... 
.................... 
.................... 
.................... void init(void) {
.................... 	setup_vref(VREF_OFF);
*
05CC:  CLRF   FBA
.................... 	setup_dac(DAC_OFF);
05CE:  CLRF   FBB
.................... 	setup_adc(ADC_OFF);
05D0:  BCF    FC2.0
.................... 	setup_adc_ports(NO_ANALOGS);
05D2:  MOVLW  00
05D4:  MOVWF  F7E
05D6:  BCF    FC1.0
05D8:  BCF    FC1.1
05DA:  BCF    FC1.2
05DC:  BCF    FC1.3
05DE:  MOVWF  F7F
.................... 
.................... 
.................... 
.................... 	set_tris_a    (0b00111111);
05E0:  MOVLW  3F
05E2:  MOVWF  F92
.................... 	port_a_pullups(0b00110000);
05E4:  MOVLW  30
05E6:  MOVWF  F77
05E8:  BCF    FF1.7
.................... //                   76543210
.................... 
.................... 	set_tris_b    (0b01110000);
05EA:  MOVLW  70
05EC:  MOVWF  F93
.................... 	port_b_pullups(0b00000000);
05EE:  CLRF   F78
.................... //                   76543210
.................... 
.................... 	set_tris_c    (0b11110011);
05F0:  MOVLW  F3
05F2:  MOVWF  F94
.................... //                   76543210
.................... 
.................... 
.................... 	/* data structure initialization */
.................... 	/* all initialized to 0 on declaration. Just do this if need non-zero */
.................... 
.................... 
.................... 	/* one periodic interrupt @ 1mS. Generated from system 16 MHz clock */
.................... 	/* prescale=16, match=249, postscale=1. Match is 249 because when match occurs, one cycle is lost */
.................... 	setup_timer_2(T2_DIV_BY_16,249,1);
05F4:  MOVLW  00
05F6:  IORLW  06
05F8:  MOVWF  FCA
05FA:  MOVLW  F9
05FC:  MOVWF  FCB
.................... 
.................... 	enable_interrupts(INT_TIMER2);
05FE:  BSF    F9D.1
0600:  GOTO   0D06 (RETURN)
.................... }
.................... 
.................... int8 read_dip_switch(void) {
.................... 	/* nomenclature is backwards on netlist. We actually want LSB on top */
.................... 	return ( ! input(PIC_ADDR_LSB)<<1 ) | ( ! input(PIC_ADDR_MSB) );
*
08E4:  BSF    F94.7
08E6:  MOVLW  00
08E8:  BTFSS  F82.7
08EA:  MOVLW  01
08EC:  MOVWF  00
08EE:  BCF    FD8.0
08F0:  RLCF   00,W
08F2:  MOVWF  x71
08F4:  BSF    F94.6
08F6:  MOVLW  00
08F8:  BTFSS  F82.6
08FA:  MOVLW  01
08FC:  IORWF  x71,W
08FE:  MOVWF  01
0900:  GOTO   0D8C (RETURN)
.................... }
.................... 
.................... void action_now_ina(void) {
.................... 	timers.now_ina=0;
*
0824:  BCF    x62.1
.................... 
.................... 	/* sample INA228 at middle of 1 second window */
.................... 	next.vbus_a=ina228_read24(INA228_A_ADDR,INA228_REG_VBUS);
0826:  MOVLW  80
0828:  MOVWF  x71
082A:  MOVLW  05
082C:  MOVWF  x72
082E:  RCALL  0700
0830:  MOVFF  03,41
0834:  MOVFF  02,40
0838:  MOVFF  01,3F
083C:  MOVFF  00,3E
.................... 	next.vshunt_a=ina228_read24(INA228_A_ADDR,INA228_REG_VSHUNT);
0840:  MOVLW  80
0842:  MOVWF  x71
0844:  MOVLW  04
0846:  MOVWF  x72
0848:  RCALL  0700
084A:  MOVFF  03,45
084E:  MOVFF  02,44
0852:  MOVFF  01,43
0856:  MOVFF  00,42
.................... 
.................... 	next.vbus_b=ina228_read24(INA228_B_ADDR,INA228_REG_VBUS);
085A:  MOVLW  9A
085C:  MOVWF  x71
085E:  MOVLW  05
0860:  MOVWF  x72
0862:  RCALL  0700
0864:  MOVFF  03,49
0868:  MOVFF  02,48
086C:  MOVFF  01,47
0870:  MOVFF  00,46
.................... 	next.vshunt_b=ina228_read24(INA228_B_ADDR,INA228_REG_VSHUNT);
0874:  MOVLW  9A
0876:  MOVWF  x71
0878:  MOVLW  04
087A:  MOVWF  x72
087C:  RCALL  0700
087E:  MOVFF  03,4D
0882:  MOVFF  02,4C
0886:  MOVFF  01,4B
088A:  MOVFF  00,4A
.................... 
.................... 	next.dietemp_a=ina228_read16(INA228_A_ADDR,INA228_REG_DIETEMP);
088E:  MOVLW  80
0890:  MOVWF  x71
0892:  MOVLW  06
0894:  MOVWF  x72
0896:  RCALL  079E
0898:  MOVFF  02,5F
089C:  MOVFF  01,5E
.................... 	next.dietemp_b=ina228_read16(INA228_B_ADDR,INA228_REG_DIETEMP);
08A0:  MOVLW  9A
08A2:  MOVWF  x71
08A4:  MOVLW  06
08A6:  MOVWF  x72
08A8:  RCALL  079E
08AA:  MOVFF  02,61
08AE:  MOVFF  01,60
08B2:  GOTO   0D7E (RETURN)
.................... }
.................... 
.................... 
.................... void periodic_millisecond(void) {
.................... 	timers.now_millisecond=0;
08B6:  BCF    x62.0
.................... 
.................... 	/* LED control */
.................... 	if ( 0==timers.led_on_a ) {
08B8:  MOVF   x63,F
08BA:  BNZ   08C2
.................... 		output_low(LED_A);
08BC:  BCF    F94.3
08BE:  BCF    F8B.3
.................... 	} else {
08C0:  BRA    08C8
.................... 		output_high(LED_A);
08C2:  BCF    F94.3
08C4:  BSF    F8B.3
.................... 		timers.led_on_a--;
08C6:  DECF   x63,F
.................... 	}
08C8:  GOTO   0D84 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... int8 get_ack_status(int8 address) {
.................... 	int8 status;
.................... 
.................... 	i2c_start(STREAM_MASTER);
.................... 	status = i2c_write(STREAM_MASTER,address);  // Status = 0 if got an ACK
.................... 	i2c_stop(STREAM_MASTER);
.................... 
.................... 	if ( 0 == status )
.................... 		return(TRUE);
.................... 
....................    return(FALSE);
.................... }
.................... 
.................... 
.................... void main(void) {
*
0C6E:  CLRF   FF8
0C70:  BCF    FD0.7
0C72:  BSF    07.7
0C74:  BSF    F93.6
0C76:  BSF    F93.4
0C78:  MOVLW  34
0C7A:  MOVWF  FC8
0C7C:  MOVLW  36
0C7E:  MOVWF  FC6
0C80:  BSF    FC5.0
0C82:  BSF    FC5.7
0C84:  CLRF   19
0C86:  BSF    FB8.3
0C88:  MOVLW  A0
0C8A:  MOVWF  FAF
0C8C:  MOVLW  01
0C8E:  MOVWF  FB0
0C90:  MOVLW  A6
0C92:  MOVWF  FAC
0C94:  MOVLW  90
0C96:  MOVWF  FAB
0C98:  CLRF   x6F
0C9A:  CLRF   x6E
0C9C:  MOVLW  00
0C9E:  MOVWF  F7E
0CA0:  BCF    FC1.0
0CA2:  BCF    FC1.1
0CA4:  BCF    FC1.2
0CA6:  BCF    FC1.3
0CA8:  MOVWF  F7F
0CAA:  CLRF   F6C
0CAC:  CLRF   F6B
0CAE:  CLRF   F6D
0CB0:  BCF    x68.0
0CB2:  BCF    x68.1
0CB4:  BRA    0CC6
0CB6:  DATA 4A,40
0CB8:  DATA 1A,00
0CBA:  DATA 04,80
0CBC:  DATA FF,FF
0CBE:  DATA 00,00
0CC0:  DATA 05,40
0CC2:  DATA 69,00
0CC4:  DATA 00,00
0CC6:  MOVLW  00
0CC8:  MOVWF  FF8
0CCA:  MOVLW  0C
0CCC:  MOVWF  FF7
0CCE:  MOVLW  B6
0CD0:  MOVWF  FF6
0CD2:  TBLRD*+
0CD4:  MOVF   FF5,W
0CD6:  MOVWF  00
0CD8:  XORLW  00
0CDA:  BZ    0D02
0CDC:  TBLRD*+
0CDE:  MOVF   FF5,W
0CE0:  MOVWF  01
0CE2:  BTFSC  FE8.7
0CE4:  BRA    0CF0
0CE6:  ANDLW  3F
0CE8:  MOVWF  FEA
0CEA:  TBLRD*+
0CEC:  MOVFF  FF5,FE9
0CF0:  BTFSC  01.6
0CF2:  TBLRD*+
0CF4:  BTFSS  01.6
0CF6:  TBLRD*+
0CF8:  MOVFF  FF5,FEE
0CFC:  DCFSNZ 00,F
0CFE:  BRA    0CD2
0D00:  BRA    0CF4
0D02:  CLRF   FF8
.................... 	int8 i;
.................... 
.................... 	init();
0D04:  BRA    05CC
.................... 
.................... 
.................... 
.................... 	/* flash on startup */
.................... 	for ( i=0 ; i<5 ; i++ ) {
0D06:  CLRF   x70
0D08:  MOVF   x70,W
0D0A:  SUBLW  04
0D0C:  BNC   0D28
.................... 		restart_wdt();
0D0E:  CLRWDT
.................... 		output_high(LED_A);
0D10:  BCF    F94.3
0D12:  BSF    F8B.3
.................... 		delay_ms(200);
0D14:  MOVLW  C8
0D16:  MOVWF  x72
0D18:  RCALL  0604
.................... 		output_low(LED_A);
0D1A:  BCF    F94.3
0D1C:  BCF    F8B.3
.................... 		delay_ms(200);
0D1E:  MOVLW  C8
0D20:  MOVWF  x72
0D22:  RCALL  0604
0D24:  INCF   x70,F
0D26:  BRA    0D08
.................... 	}
.................... 
.................... 	delay_ms(1000);
0D28:  MOVLW  04
0D2A:  MOVWF  x71
0D2C:  MOVLW  FA
0D2E:  MOVWF  x72
0D30:  RCALL  0604
0D32:  DECFSZ x71,F
0D34:  BRA    0D2C
.................... 
.................... 	fprintf(STREAM_FTDI,"# dcswc_module_voltage_current_counter %s\r\n",__DATE__);
0D36:  MOVLW  58
0D38:  MOVWF  FF6
0D3A:  MOVLW  04
0D3C:  MOVWF  FF7
0D3E:  MOVLW  27
0D40:  MOVWF  x72
0D42:  RCALL  062C
0D44:  MOVLW  84
0D46:  MOVWF  FF6
0D48:  MOVLW  04
0D4A:  MOVWF  FF7
0D4C:  BRA    064C
0D4E:  MOVLW  0D
0D50:  BTFSS  F9E.4
0D52:  BRA    0D50
0D54:  MOVWF  FAD
0D56:  MOVLW  0A
0D58:  BTFSS  F9E.4
0D5A:  BRA    0D58
0D5C:  MOVWF  FAD
.................... 
.................... 	delay_ms(1000);
0D5E:  MOVLW  04
0D60:  MOVWF  x71
0D62:  MOVLW  FA
0D64:  MOVWF  x72
0D66:  RCALL  0604
0D68:  DECFSZ x71,F
0D6A:  BRA    0D62
.................... 
.................... 	timers.led_on_a=500;
0D6C:  MOVLW  F4
0D6E:  MOVWF  x63
.................... 
.................... 	enable_interrupts(GLOBAL);
0D70:  MOVLW  C0
0D72:  IORWF  FF2,F
.................... 
.................... 	/* enable I2C slave interrupt */
.................... 	enable_interrupts(INT_SSP);
0D74:  BSF    F9D.3
.................... 
.................... 	for ( ; ; ) {
.................... 		restart_wdt();
0D76:  CLRWDT
.................... 
.................... 		/* query INA228's for next */
.................... 		if ( timers.now_ina ) {
0D78:  BTFSS  x62.1
0D7A:  BRA    0D7E
.................... 			action_now_ina();
0D7C:  BRA    0824
.................... 		}
.................... 
.................... 		if ( timers.now_millisecond ) {
0D7E:  BTFSS  x62.0
0D80:  BRA    0D84
.................... 			periodic_millisecond();
0D82:  BRA    08B6
.................... 		}
.................... 
.................... 		if ( kbhit() ) {
0D84:  BTFSS  F9E.5
0D86:  BRA    1056
.................... 			getc();
0D88:  BRA    08CC
.................... 
.................... 			fprintf(STREAM_FTDI,"# DIP SWITCHES: %d\r\n",
.................... 				read_dip_switch()
.................... 			);
0D8A:  BRA    08E4
0D8C:  MOVFF  01,71
0D90:  MOVLW  8E
0D92:  MOVWF  FF6
0D94:  MOVLW  04
0D96:  MOVWF  FF7
0D98:  MOVLW  10
0D9A:  MOVWF  x72
0D9C:  RCALL  062C
0D9E:  MOVFF  71,72
0DA2:  MOVLW  18
0DA4:  MOVWF  x73
0DA6:  BRA    092C
0DA8:  MOVLW  0D
0DAA:  BTFSS  F9E.4
0DAC:  BRA    0DAA
0DAE:  MOVWF  FAD
0DB0:  MOVLW  0A
0DB2:  BTFSS  F9E.4
0DB4:  BRA    0DB2
0DB6:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# A: 0x%08lx / 0x%08lx / 0x%04lu\r\n",
.................... 				current.vbus_a,
.................... 				current.vshunt_a,
.................... 				current.dietemp_a
.................... 			);
0DB8:  MOVLW  A4
0DBA:  MOVWF  FF6
0DBC:  MOVLW  04
0DBE:  MOVWF  FF7
0DC0:  MOVLW  07
0DC2:  MOVWF  x72
0DC4:  RCALL  062C
0DC6:  MOVFF  1D,71
0DCA:  MOVLW  57
0DCC:  MOVWF  x72
0DCE:  RCALL  09E0
0DD0:  MOVFF  1C,71
0DD4:  MOVLW  57
0DD6:  MOVWF  x72
0DD8:  RCALL  09E0
0DDA:  MOVFF  1B,71
0DDE:  MOVLW  57
0DE0:  MOVWF  x72
0DE2:  RCALL  09E0
0DE4:  MOVFF  1A,71
0DE8:  MOVLW  57
0DEA:  MOVWF  x72
0DEC:  RCALL  09E0
0DEE:  MOVLW  B0
0DF0:  MOVWF  FF6
0DF2:  MOVLW  04
0DF4:  MOVWF  FF7
0DF6:  MOVLW  05
0DF8:  MOVWF  x72
0DFA:  RCALL  062C
0DFC:  MOVFF  21,71
0E00:  MOVLW  57
0E02:  MOVWF  x72
0E04:  RCALL  09E0
0E06:  MOVFF  20,71
0E0A:  MOVLW  57
0E0C:  MOVWF  x72
0E0E:  RCALL  09E0
0E10:  MOVFF  1F,71
0E14:  MOVLW  57
0E16:  MOVWF  x72
0E18:  RCALL  09E0
0E1A:  MOVFF  1E,71
0E1E:  MOVLW  57
0E20:  MOVWF  x72
0E22:  RCALL  09E0
0E24:  MOVLW  BA
0E26:  MOVWF  FF6
0E28:  MOVLW  04
0E2A:  MOVWF  FF7
0E2C:  MOVLW  05
0E2E:  MOVWF  x72
0E30:  CALL   062C
0E34:  MOVLW  09
0E36:  MOVWF  FE9
0E38:  MOVFF  3B,72
0E3C:  MOVFF  3A,71
0E40:  RCALL  0A22
0E42:  MOVLW  0D
0E44:  BTFSS  F9E.4
0E46:  BRA    0E44
0E48:  MOVWF  FAD
0E4A:  MOVLW  0A
0E4C:  BTFSS  F9E.4
0E4E:  BRA    0E4C
0E50:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# B: 0x%08lx / 0x%08lx / 0x%04lu\r\n",
.................... 				current.vbus_b,
.................... 				current.vshunt_b,
.................... 				current.dietemp_b
.................... 			);
0E52:  MOVLW  C8
0E54:  MOVWF  FF6
0E56:  MOVLW  04
0E58:  MOVWF  FF7
0E5A:  MOVLW  07
0E5C:  MOVWF  x72
0E5E:  CALL   062C
0E62:  MOVFF  25,71
0E66:  MOVLW  57
0E68:  MOVWF  x72
0E6A:  RCALL  09E0
0E6C:  MOVFF  24,71
0E70:  MOVLW  57
0E72:  MOVWF  x72
0E74:  RCALL  09E0
0E76:  MOVFF  23,71
0E7A:  MOVLW  57
0E7C:  MOVWF  x72
0E7E:  RCALL  09E0
0E80:  MOVFF  22,71
0E84:  MOVLW  57
0E86:  MOVWF  x72
0E88:  RCALL  09E0
0E8A:  MOVLW  D4
0E8C:  MOVWF  FF6
0E8E:  MOVLW  04
0E90:  MOVWF  FF7
0E92:  MOVLW  05
0E94:  MOVWF  x72
0E96:  CALL   062C
0E9A:  MOVFF  29,71
0E9E:  MOVLW  57
0EA0:  MOVWF  x72
0EA2:  RCALL  09E0
0EA4:  MOVFF  28,71
0EA8:  MOVLW  57
0EAA:  MOVWF  x72
0EAC:  RCALL  09E0
0EAE:  MOVFF  27,71
0EB2:  MOVLW  57
0EB4:  MOVWF  x72
0EB6:  RCALL  09E0
0EB8:  MOVFF  26,71
0EBC:  MOVLW  57
0EBE:  MOVWF  x72
0EC0:  RCALL  09E0
0EC2:  MOVLW  DE
0EC4:  MOVWF  FF6
0EC6:  MOVLW  04
0EC8:  MOVWF  FF7
0ECA:  MOVLW  05
0ECC:  MOVWF  x72
0ECE:  CALL   062C
0ED2:  MOVLW  09
0ED4:  MOVWF  FE9
0ED6:  MOVFF  3D,72
0EDA:  MOVFF  3C,71
0EDE:  RCALL  0A22
0EE0:  MOVLW  0D
0EE2:  BTFSS  F9E.4
0EE4:  BRA    0EE2
0EE6:  MOVWF  FAD
0EE8:  MOVLW  0A
0EEA:  BTFSS  F9E.4
0EEC:  BRA    0EEA
0EEE:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# current.count_a_last_second=%lu\r\n",
.................... 				current.count_a_last_second
.................... 			);
0EF0:  MOVLW  EC
0EF2:  MOVWF  FF6
0EF4:  MOVLW  04
0EF6:  MOVWF  FF7
0EF8:  MOVLW  1E
0EFA:  MOVWF  x72
0EFC:  CALL   062C
0F00:  MOVLW  10
0F02:  MOVWF  FE9
0F04:  MOVFF  2B,72
0F08:  MOVFF  2A,71
0F0C:  RCALL  0A22
0F0E:  MOVLW  0D
0F10:  BTFSS  F9E.4
0F12:  BRA    0F10
0F14:  MOVWF  FAD
0F16:  MOVLW  0A
0F18:  BTFSS  F9E.4
0F1A:  BRA    0F18
0F1C:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# current.count_b_last_second=%lu\r\n",
.................... 				current.count_b_last_second
.................... 			);
0F1E:  MOVLW  10
0F20:  MOVWF  FF6
0F22:  MOVLW  05
0F24:  MOVWF  FF7
0F26:  MOVLW  1E
0F28:  MOVWF  x72
0F2A:  CALL   062C
0F2E:  MOVLW  10
0F30:  MOVWF  FE9
0F32:  MOVFF  2D,72
0F36:  MOVFF  2C,71
0F3A:  RCALL  0A22
0F3C:  MOVLW  0D
0F3E:  BTFSS  F9E.4
0F40:  BRA    0F3E
0F42:  MOVWF  FAD
0F44:  MOVLW  0A
0F46:  BTFSS  F9E.4
0F48:  BRA    0F46
0F4A:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# current.count_a_long=%lu\r\n",
.................... 				current.count_a_long
.................... 			);
0F4C:  MOVLW  34
0F4E:  MOVWF  FF6
0F50:  MOVLW  05
0F52:  MOVWF  FF7
0F54:  MOVLW  17
0F56:  MOVWF  x72
0F58:  CALL   062C
0F5C:  MOVLW  41
0F5E:  MOVWF  FE9
0F60:  MOVFF  31,74
0F64:  MOVFF  30,73
0F68:  MOVFF  2F,72
0F6C:  MOVFF  2E,71
0F70:  RCALL  0B5C
0F72:  MOVLW  0D
0F74:  BTFSS  F9E.4
0F76:  BRA    0F74
0F78:  MOVWF  FAD
0F7A:  MOVLW  0A
0F7C:  BTFSS  F9E.4
0F7E:  BRA    0F7C
0F80:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# current.count_b_long=%lu\r\n",
.................... 				current.count_b_long
.................... 			);
0F82:  MOVLW  52
0F84:  MOVWF  FF6
0F86:  MOVLW  05
0F88:  MOVWF  FF7
0F8A:  MOVLW  17
0F8C:  MOVWF  x72
0F8E:  CALL   062C
0F92:  MOVLW  41
0F94:  MOVWF  FE9
0F96:  MOVFF  35,74
0F9A:  MOVFF  34,73
0F9E:  MOVFF  33,72
0FA2:  MOVFF  32,71
0FA6:  RCALL  0B5C
0FA8:  MOVLW  0D
0FAA:  BTFSS  F9E.4
0FAC:  BRA    0FAA
0FAE:  MOVWF  FAD
0FB0:  MOVLW  0A
0FB2:  BTFSS  F9E.4
0FB4:  BRA    0FB2
0FB6:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# current.count_seconds_long=%lu\r\n",
.................... 				current.count_seconds_long
.................... 			);
0FB8:  MOVLW  70
0FBA:  MOVWF  FF6
0FBC:  MOVLW  05
0FBE:  MOVWF  FF7
0FC0:  MOVLW  1D
0FC2:  MOVWF  x72
0FC4:  CALL   062C
0FC8:  MOVLW  41
0FCA:  MOVWF  FE9
0FCC:  MOVFF  39,74
0FD0:  MOVFF  38,73
0FD4:  MOVFF  37,72
0FD8:  MOVFF  36,71
0FDC:  RCALL  0B5C
0FDE:  MOVLW  0D
0FE0:  BTFSS  F9E.4
0FE2:  BRA    0FE0
0FE4:  MOVWF  FAD
0FE6:  MOVLW  0A
0FE8:  BTFSS  F9E.4
0FEA:  BRA    0FE8
0FEC:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# input(PIC_ADDR_MSB)=%u\r\n",input(PIC_ADDR_MSB));
0FEE:  BSF    F94.6
0FF0:  MOVLW  00
0FF2:  BTFSC  F82.6
0FF4:  MOVLW  01
0FF6:  MOVWF  x71
0FF8:  MOVLW  94
0FFA:  MOVWF  FF6
0FFC:  MOVLW  05
0FFE:  MOVWF  FF7
1000:  MOVLW  16
1002:  MOVWF  x72
1004:  CALL   062C
1008:  MOVFF  71,72
100C:  MOVLW  1B
100E:  MOVWF  x73
1010:  RCALL  0C02
1012:  MOVLW  0D
1014:  BTFSS  F9E.4
1016:  BRA    1014
1018:  MOVWF  FAD
101A:  MOVLW  0A
101C:  BTFSS  F9E.4
101E:  BRA    101C
1020:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# input(PIC_ADDR_LSB)=%u\r\n",input(PIC_ADDR_LSB));
1022:  BSF    F94.7
1024:  MOVLW  00
1026:  BTFSC  F82.7
1028:  MOVLW  01
102A:  MOVWF  x71
102C:  MOVLW  B0
102E:  MOVWF  FF6
1030:  MOVLW  05
1032:  MOVWF  FF7
1034:  MOVLW  16
1036:  MOVWF  x72
1038:  CALL   062C
103C:  MOVFF  71,72
1040:  MOVLW  1B
1042:  MOVWF  x73
1044:  RCALL  0C02
1046:  MOVLW  0D
1048:  BTFSS  F9E.4
104A:  BRA    1048
104C:  MOVWF  FAD
104E:  MOVLW  0A
1050:  BTFSS  F9E.4
1052:  BRA    1050
1054:  MOVWF  FAD
.................... 
.................... 		}
1056:  BRA    0D76
.................... 
.................... 
.................... 	}
.................... 
.................... 
.................... }
1058:  BRA    1058

Configuration Fuses:
   Word  1: 2200   HS NOPLLEN PCLKEN NOFCMEN NOIESO
   Word  2: 1819   NOPUT NOBROWNOUT BORV19 NOWDT WDT4096
   Word  3: 0000   NOHFOFST NOMCLR
   Word  4: 0009   STVREN NOLVP BBSIZ2K NOXINST DEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 40 00                                        ..@.
