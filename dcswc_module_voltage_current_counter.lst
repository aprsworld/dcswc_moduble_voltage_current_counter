CCS PCH C Compiler, Version 5.090, 49113               07-Jan-22 18:27

               Filename:   C:\Users\James Jarvis\Desktop\planetPrecision\dcswc_module_voltage_current_counter\dcswc_module_voltage_current_counter.lst

               ROM used:   3456 bytes (22%)
                           Largest free fragment is 12092
               RAM used:   112 (22%) at main() level
                           143 (28%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 30

0000:  GOTO   0A0C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00BA
0060:  BTFSS  F9D.3
0062:  GOTO   006C
0066:  BTFSC  F9E.3
0068:  GOTO   01E6
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "dcswc_module_voltage_current_counter.h"
.................... #include <18F14K22.h>
.................... //////////// Standard Header file for the PIC18F14K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F14K22
*
029A:  DATA 23,20
029C:  DATA 64,63
029E:  DATA 73,77
02A0:  DATA 63,5F
02A2:  DATA 6D,6F
02A4:  DATA 64,75
02A6:  DATA 6C,65
02A8:  DATA 5F,76
02AA:  DATA 6F,6C
02AC:  DATA 74,61
02AE:  DATA 67,65
02B0:  DATA 5F,63
02B2:  DATA 75,72
02B4:  DATA 72,65
02B6:  DATA 6E,74
02B8:  DATA 5F,63
02BA:  DATA 6F,75
02BC:  DATA 6E,74
02BE:  DATA 65,72
02C0:  DATA 20,25
02C2:  DATA 73,0D
02C4:  DATA 0A,00
02C6:  DATA 37,2D
02C8:  DATA 4A,61
02CA:  DATA 6E,2D
02CC:  DATA 32,32
02CE:  DATA 00,00
02D0:  DATA 23,20
02D2:  DATA 44,49
02D4:  DATA 50,20
02D6:  DATA 53,57
02D8:  DATA 49,54
02DA:  DATA 43,48
02DC:  DATA 45,53
02DE:  DATA 3A,20
02E0:  DATA 25,64
02E2:  DATA 0D,0A
02E4:  DATA 00,00
02E6:  DATA 23,20
02E8:  DATA 41,3A
02EA:  DATA 20,30
02EC:  DATA 78,25
02EE:  DATA 30,38
02F0:  DATA 6C,78
02F2:  DATA 20,2F
02F4:  DATA 20,30
02F6:  DATA 78,25
02F8:  DATA 30,38
02FA:  DATA 6C,78
02FC:  DATA 20,2F
02FE:  DATA 20,30
0300:  DATA 78,25
0302:  DATA 30,34
0304:  DATA 6C,75
0306:  DATA 0D,0A
0308:  DATA 00,00
030A:  DATA 23,20
030C:  DATA 42,3A
030E:  DATA 20,30
0310:  DATA 78,25
0312:  DATA 30,38
0314:  DATA 6C,78
0316:  DATA 20,2F
0318:  DATA 20,30
031A:  DATA 78,25
031C:  DATA 30,38
031E:  DATA 6C,78
0320:  DATA 20,2F
0322:  DATA 20,30
0324:  DATA 78,25
0326:  DATA 30,34
0328:  DATA 6C,75
032A:  DATA 0D,0A
032C:  DATA 00,00
032E:  DATA 23,20
0330:  DATA 63,75
0332:  DATA 72,72
0334:  DATA 65,6E
0336:  DATA 74,2E
0338:  DATA 63,6F
033A:  DATA 75,6E
033C:  DATA 74,5F
033E:  DATA 61,5F
0340:  DATA 6C,61
0342:  DATA 73,74
0344:  DATA 5F,73
0346:  DATA 65,63
0348:  DATA 6F,6E
034A:  DATA 64,3D
034C:  DATA 25,6C
034E:  DATA 75,0D
0350:  DATA 0A,00
0352:  DATA 23,20
0354:  DATA 63,75
0356:  DATA 72,72
0358:  DATA 65,6E
035A:  DATA 74,2E
035C:  DATA 63,6F
035E:  DATA 75,6E
0360:  DATA 74,5F
0362:  DATA 62,5F
0364:  DATA 6C,61
0366:  DATA 73,74
0368:  DATA 5F,73
036A:  DATA 65,63
036C:  DATA 6F,6E
036E:  DATA 64,3D
0370:  DATA 25,6C
0372:  DATA 75,0D
0374:  DATA 0A,00
0376:  DATA 23,20
0378:  DATA 63,75
037A:  DATA 72,72
037C:  DATA 65,6E
037E:  DATA 74,2E
0380:  DATA 63,6F
0382:  DATA 75,6E
0384:  DATA 74,5F
0386:  DATA 61,5F
0388:  DATA 6C,6F
038A:  DATA 6E,67
038C:  DATA 3D,25
038E:  DATA 6C,75
0390:  DATA 0D,0A
0392:  DATA 00,00
0394:  DATA 23,20
0396:  DATA 63,75
0398:  DATA 72,72
039A:  DATA 65,6E
039C:  DATA 74,2E
039E:  DATA 63,6F
03A0:  DATA 75,6E
03A2:  DATA 74,5F
03A4:  DATA 62,5F
03A6:  DATA 6C,6F
03A8:  DATA 6E,67
03AA:  DATA 3D,25
03AC:  DATA 6C,75
03AE:  DATA 0D,0A
03B0:  DATA 00,00
03B2:  DATA 23,20
03B4:  DATA 63,75
03B6:  DATA 72,72
03B8:  DATA 65,6E
03BA:  DATA 74,2E
03BC:  DATA 63,6F
03BE:  DATA 75,6E
03C0:  DATA 74,5F
03C2:  DATA 73,65
03C4:  DATA 63,6F
03C6:  DATA 6E,64
03C8:  DATA 73,5F
03CA:  DATA 6C,6F
03CC:  DATA 6E,67
03CE:  DATA 3D,25
03D0:  DATA 6C,75
03D2:  DATA 0D,0A
03D4:  DATA 00,00
*
0436:  TBLRD*+
0438:  MOVFF  FF6,71
043C:  MOVFF  FF7,72
0440:  MOVF   FF5,W
0442:  BTFSS  F9E.4
0444:  BRA    0442
0446:  MOVWF  FAD
0448:  MOVFF  71,FF6
044C:  MOVFF  72,FF7
0450:  DECFSZ x70,F
0452:  BRA    0436
0454:  RETURN 0
0456:  TBLRD*+
0458:  MOVF   FF5,F
045A:  BZ    0476
045C:  MOVFF  FF6,6F
0460:  MOVFF  FF7,70
0464:  MOVF   FF5,W
0466:  BTFSS  F9E.4
0468:  BRA    0466
046A:  MOVWF  FAD
046C:  MOVFF  6F,FF6
0470:  MOVFF  70,FF7
0474:  BRA    0456
0476:  GOTO   0AE6 (RETURN)
*
070E:  MOVF   x77,W
0710:  CLRF   01
0712:  SUBWF  x76,W
0714:  BC    071C
0716:  MOVFF  76,00
071A:  BRA    0734
071C:  CLRF   00
071E:  MOVLW  08
0720:  MOVWF  x78
0722:  RLCF   x76,F
0724:  RLCF   00,F
0726:  MOVF   x77,W
0728:  SUBWF  00,W
072A:  BTFSC  FD8.0
072C:  MOVWF  00
072E:  RLCF   01,F
0730:  DECFSZ x78,F
0732:  BRA    0722
0734:  RETURN 0
0736:  MOVLW  20
0738:  BTFSS  x71.4
073A:  MOVLW  30
073C:  MOVWF  x72
073E:  MOVFF  70,00
0742:  BTFSS  x70.7
0744:  BRA    0756
0746:  COMF   00,F
0748:  INCF   00,F
074A:  MOVFF  00,70
074E:  MOVLW  2D
0750:  MOVWF  x72
0752:  BSF    x71.7
0754:  BSF    x71.0
0756:  MOVF   01,W
0758:  MOVFF  70,76
075C:  MOVLW  64
075E:  MOVWF  x77
0760:  RCALL  070E
0762:  MOVFF  00,70
0766:  MOVLW  30
0768:  ADDWF  01,W
076A:  MOVWF  x73
076C:  MOVFF  70,76
0770:  MOVLW  0A
0772:  MOVWF  x77
0774:  RCALL  070E
0776:  MOVLW  30
0778:  ADDWF  00,W
077A:  MOVWF  x75
077C:  MOVLW  30
077E:  ADDWF  01,W
0780:  MOVWF  x74
0782:  MOVFF  72,00
0786:  MOVLW  30
0788:  SUBWF  x73,W
078A:  BZ    0794
078C:  BSF    x71.1
078E:  BTFSC  x71.7
0790:  BSF    x71.2
0792:  BRA    07B8
0794:  MOVFF  72,73
0798:  MOVLW  20
079A:  MOVWF  x72
079C:  MOVLW  30
079E:  SUBWF  x74,W
07A0:  BZ    07AA
07A2:  BSF    x71.0
07A4:  BTFSC  x71.7
07A6:  BSF    x71.1
07A8:  BRA    07B8
07AA:  BTFSS  FD8.2
07AC:  BSF    x71.0
07AE:  BNZ   07B8
07B0:  MOVFF  73,74
07B4:  MOVLW  20
07B6:  MOVWF  x73
07B8:  BTFSC  x71.2
07BA:  BRA    07C6
07BC:  BTFSC  x71.1
07BE:  BRA    07CE
07C0:  BTFSC  x71.0
07C2:  BRA    07D6
07C4:  BRA    07DE
07C6:  MOVF   x72,W
07C8:  BTFSS  F9E.4
07CA:  BRA    07C8
07CC:  MOVWF  FAD
07CE:  MOVF   x73,W
07D0:  BTFSS  F9E.4
07D2:  BRA    07D0
07D4:  MOVWF  FAD
07D6:  MOVF   x74,W
07D8:  BTFSS  F9E.4
07DA:  BRA    07D8
07DC:  MOVWF  FAD
07DE:  MOVF   x75,W
07E0:  BTFSS  F9E.4
07E2:  BRA    07E0
07E4:  MOVWF  FAD
07E6:  GOTO   0B40 (RETURN)
07EA:  BTFSC  x70.7
07EC:  BRA    080E
07EE:  MOVLW  0F
07F0:  MOVWF  00
07F2:  SWAPF  x6F,W
07F4:  ANDWF  00,F
07F6:  MOVLW  0A
07F8:  SUBWF  00,W
07FA:  BC    0802
07FC:  MOVLW  30
07FE:  ADDWF  00,F
0800:  BRA    0806
0802:  MOVF   x70,W
0804:  ADDWF  00,F
0806:  MOVF   00,W
0808:  BTFSS  F9E.4
080A:  BRA    0808
080C:  MOVWF  FAD
080E:  MOVLW  0F
0810:  ANDWF  x6F,F
0812:  MOVLW  0A
0814:  SUBWF  x6F,W
0816:  BC    081C
0818:  MOVLW  30
081A:  BRA    0820
081C:  BCF    x70.7
081E:  MOVF   x70,W
0820:  ADDWF  x6F,F
0822:  MOVF   x6F,W
0824:  BTFSS  F9E.4
0826:  BRA    0824
0828:  MOVWF  FAD
082A:  RETURN 0
082C:  MOVFF  FEA,77
0830:  MOVFF  FE9,76
0834:  SWAPF  x70,W
0836:  IORLW  F0
0838:  MOVWF  x72
083A:  ADDWF  x72,F
083C:  ADDLW  E2
083E:  MOVWF  x73
0840:  ADDLW  32
0842:  MOVWF  x75
0844:  MOVF   x70,W
0846:  ANDLW  0F
0848:  ADDWF  x73,F
084A:  ADDWF  x73,F
084C:  ADDWF  x75,F
084E:  ADDLW  E9
0850:  MOVWF  x74
0852:  ADDWF  x74,F
0854:  ADDWF  x74,F
0856:  SWAPF  x6F,W
0858:  ANDLW  0F
085A:  ADDWF  x74,F
085C:  ADDWF  x75,F
085E:  RLCF   x74,F
0860:  RLCF   x75,F
0862:  COMF   x75,F
0864:  RLCF   x75,F
0866:  MOVF   x6F,W
0868:  ANDLW  0F
086A:  ADDWF  x75,F
086C:  RLCF   x72,F
086E:  MOVLW  07
0870:  MOVWF  x71
0872:  MOVLW  0A
0874:  DECF   x74,F
0876:  ADDWF  x75,F
0878:  BNC   0874
087A:  DECF   x73,F
087C:  ADDWF  x74,F
087E:  BNC   087A
0880:  DECF   x72,F
0882:  ADDWF  x73,F
0884:  BNC   0880
0886:  DECF   x71,F
0888:  ADDWF  x72,F
088A:  BNC   0886
088C:  CLRF   FEA
088E:  MOVLW  71
0890:  MOVWF  FE9
0892:  MOVLW  07
0894:  ANDWF  x76,W
0896:  BCF    x76.6
0898:  ADDWF  FE9,F
089A:  MOVLW  00
089C:  ADDWFC FEA,F
089E:  MOVF   FE9,W
08A0:  SUBLW  75
08A2:  BNZ   08AA
08A4:  MOVF   FEA,F
08A6:  BNZ   08AA
08A8:  BSF    x76.6
08AA:  MOVF   FEF,W
08AC:  MOVWF  00
08AE:  BNZ   08C0
08B0:  BTFSC  x76.6
08B2:  BRA    08C0
08B4:  BTFSC  x76.4
08B6:  BRA    08D0
08B8:  BTFSC  x76.3
08BA:  BRA    08C0
08BC:  MOVLW  20
08BE:  BRA    08C6
08C0:  BSF    x76.3
08C2:  BCF    x76.4
08C4:  MOVLW  30
08C6:  ADDWF  00,F
08C8:  MOVF   00,W
08CA:  BTFSS  F9E.4
08CC:  BRA    08CA
08CE:  MOVWF  FAD
08D0:  MOVF   FEE,W
08D2:  BTFSS  x76.6
08D4:  BRA    089E
08D6:  RETURN 0
08D8:  BTFSC  FD8.1
08DA:  BRA    08E2
08DC:  CLRF   FEA
08DE:  MOVLW  83
08E0:  MOVWF  FE9
08E2:  CLRF   00
08E4:  CLRF   01
08E6:  CLRF   02
08E8:  CLRF   03
08EA:  CLRF   x83
08EC:  CLRF   x84
08EE:  CLRF   x85
08F0:  CLRF   x86
08F2:  MOVF   x82,W
08F4:  IORWF  x81,W
08F6:  IORWF  x80,W
08F8:  IORWF  x7F,W
08FA:  BZ    0954
08FC:  MOVLW  20
08FE:  MOVWF  x87
0900:  BCF    FD8.0
0902:  RLCF   x7B,F
0904:  RLCF   x7C,F
0906:  RLCF   x7D,F
0908:  RLCF   x7E,F
090A:  RLCF   x83,F
090C:  RLCF   x84,F
090E:  RLCF   x85,F
0910:  RLCF   x86,F
0912:  MOVF   x82,W
0914:  SUBWF  x86,W
0916:  BNZ   0928
0918:  MOVF   x81,W
091A:  SUBWF  x85,W
091C:  BNZ   0928
091E:  MOVF   x80,W
0920:  SUBWF  x84,W
0922:  BNZ   0928
0924:  MOVF   x7F,W
0926:  SUBWF  x83,W
0928:  BNC   0948
092A:  MOVF   x7F,W
092C:  SUBWF  x83,F
092E:  MOVF   x80,W
0930:  BTFSS  FD8.0
0932:  INCFSZ x80,W
0934:  SUBWF  x84,F
0936:  MOVF   x81,W
0938:  BTFSS  FD8.0
093A:  INCFSZ x81,W
093C:  SUBWF  x85,F
093E:  MOVF   x82,W
0940:  BTFSS  FD8.0
0942:  INCFSZ x82,W
0944:  SUBWF  x86,F
0946:  BSF    FD8.0
0948:  RLCF   00,F
094A:  RLCF   01,F
094C:  RLCF   02,F
094E:  RLCF   03,F
0950:  DECFSZ x87,F
0952:  BRA    0900
0954:  MOVFF  83,FEF
0958:  MOVFF  84,FEC
095C:  MOVFF  85,FEC
0960:  MOVFF  86,FEC
0964:  RETURN 0
0966:  MOVF   FE9,W
0968:  MOVWF  x73
096A:  MOVLW  3B
096C:  MOVWF  x7A
096E:  MOVLW  9A
0970:  MOVWF  x79
0972:  MOVLW  CA
0974:  MOVWF  x78
0976:  CLRF   x77
0978:  MOVLW  0A
097A:  MOVWF  x75
097C:  BSF    FD8.1
097E:  CLRF   FEA
0980:  MOVLW  6F
0982:  MOVWF  FE9
0984:  MOVFF  72,7E
0988:  MOVFF  71,7D
098C:  MOVFF  70,7C
0990:  MOVFF  6F,7B
0994:  MOVFF  7A,82
0998:  MOVFF  79,81
099C:  MOVFF  78,80
09A0:  MOVFF  77,7F
09A4:  RCALL  08D8
09A6:  MOVF   01,W
09A8:  MOVF   00,F
09AA:  BNZ   09CA
09AC:  MOVF   x75,W
09AE:  XORLW  01
09B0:  BZ    09CA
09B2:  MOVF   x73,W
09B4:  BZ    09CC
09B6:  ANDLW  0F
09B8:  SUBWF  x75,W
09BA:  BZ    09BE
09BC:  BC    09D8
09BE:  BTFSC  x73.7
09C0:  BRA    09D8
09C2:  BTFSC  x73.6
09C4:  BRA    09CC
09C6:  MOVLW  20
09C8:  BRA    09CE
09CA:  CLRF   x73
09CC:  MOVLW  30
09CE:  ADDWF  00,F
09D0:  MOVF   00,W
09D2:  BTFSS  F9E.4
09D4:  BRA    09D2
09D6:  MOVWF  FAD
09D8:  BCF    FD8.1
09DA:  MOVFF  7A,7E
09DE:  MOVFF  79,7D
09E2:  MOVFF  78,7C
09E6:  MOVFF  77,7B
09EA:  CLRF   x82
09EC:  CLRF   x81
09EE:  CLRF   x80
09F0:  MOVLW  0A
09F2:  MOVWF  x7F
09F4:  RCALL  08D8
09F6:  MOVFF  03,7A
09FA:  MOVFF  02,79
09FE:  MOVFF  01,78
0A02:  MOVFF  00,77
0A06:  DECFSZ x75,F
0A08:  BRA    097C
0A0A:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #device *=16
.................... #use delay(clock=16MHz)
*
040E:  CLRF   FEA
0410:  MOVLW  70
0412:  MOVWF  FE9
0414:  MOVF   FEF,W
0416:  BZ    0434
0418:  MOVLW  05
041A:  MOVWF  01
041C:  CLRF   00
041E:  DECFSZ 00,F
0420:  BRA    041E
0422:  DECFSZ 01,F
0424:  BRA    041C
0426:  MOVLW  2E
0428:  MOVWF  00
042A:  DECFSZ 00,F
042C:  BRA    042A
042E:  BRA    0430
0430:  DECFSZ FEF,F
0432:  BRA    0418
0434:  RETURN 0
.................... 
.................... /* hardware I2C port is slave and is connected to DCSWC bus */
.................... #use i2c(stream=STREAM_SLAVE,SLAVE, I2C1, address=0x34, FORCE_HW)
*
01D0:  MOVF   FC9,W
01D2:  MOVFF  8B,FC9
01D6:  BSF    FC6.4
01D8:  BCF    F9E.3
01DA:  BTFSC  FC7.0
01DC:  BRA    01DA
01DE:  CLRF   01
01E0:  BTFSS  FC5.6
01E2:  INCF   01,F
01E4:  RETURN 0
.................... /* Linux / i2cdetect will use the CCS address >>1. So 0x34 becomes 0x1a */
.................... 
.................... 
.................... 
.................... #fuses HS
.................... #fuses NOPLLEN
.................... #fuses NOFCMEN
.................... #fuses NOIESO
.................... #fuses PUT
.................... #fuses BROWNOUT
.................... #fuses WDT4096
.................... #fuses NOHFOFST
.................... #fuses NOMCLR
.................... #fuses STVREN
.................... #fuses NOLVP
.................... #fuses NOXINST
.................... #fuses NODEBUG
.................... #fuses NOPROTECT
.................... #fuses NOWRT
.................... #fuses NOWRTC 
.................... #fuses NOWRTB
.................... #fuses NOWRTD
.................... #fuses NOEBTR
.................... #fuses NOEBTRB
.................... 
.................... #use standard_io(ALL)
.................... 
.................... #use rs232(UART1,stream=STREAM_FTDI,baud=9600,errors)	
*
06D6:  BTFSS  F9E.5
06D8:  BRA    06D6
06DA:  MOVFF  FAB,19
06DE:  MOVFF  FAE,01
06E2:  BTFSS  19.1
06E4:  BRA    06EA
06E6:  BCF    FAB.4
06E8:  BSF    FAB.4
06EA:  GOTO   0B22 (RETURN)
.................... 
.................... /* program config CRC of 0 and a serial_prefix of 'A' ... that will trigger a write default on first boot */
.................... #ROM 0xF00000 = { 0x00, 0x00, 0x40, 0x00 }
.................... 
.................... 
.................... 
.................... #define COUNT_B              PIN_C5
.................... #define COUNT_A              PIN_C4
.................... #define LED_A                PIN_C3
.................... #define PIC_ADDR_MSB         PIN_C6
.................... #define PIC_ADDR_LSB         PIN_C5
.................... #define SER_TO_PC            PIN_B7
.................... 
.................... #define INA_ALERT            PIN_A2
.................... #define I2C_SW_SDA           PIN_C0
.................... #define I2C_SW_SCL           PIN_C1
.................... #define TP2                  PIN_C2
.................... #define I2C_SDA              PIN_B4
.................... #define SER_FROM_PC          PIN_B5
.................... #define I2C_SCL              PIN_B6
.................... 
.................... 
.................... /* software I2C port is maser and is connected to two INA228A */
.................... #use i2c(stream=STREAM_MASTER, MASTER, FAST, FORCE_SW, scl=I2C_SW_SCL, sda=I2C_SW_SDA)
*
047A:  MOVLW  08
047C:  MOVWF  01
047E:  NOP   
0480:  BCF    F8B.1
0482:  BCF    F94.1
0484:  NOP   
0486:  RLCF   x76,F
0488:  BCF    F8B.0
048A:  BTFSC  FD8.0
048C:  BSF    F94.0
048E:  BTFSS  FD8.0
0490:  BCF    F94.0
0492:  BSF    F94.1
0494:  BTFSS  F82.1
0496:  BRA    0494
0498:  DECFSZ 01,F
049A:  BRA    047E
049C:  NOP   
049E:  BCF    F8B.1
04A0:  BCF    F94.1
04A2:  NOP   
04A4:  BSF    F94.0
04A6:  NOP   
04A8:  NOP   
04AA:  BSF    F94.1
04AC:  BTFSS  F82.1
04AE:  BRA    04AC
04B0:  CLRF   01
04B2:  NOP   
04B4:  BTFSC  F82.0
04B6:  BSF    01.0
04B8:  BCF    F8B.1
04BA:  BCF    F94.1
04BC:  BCF    F8B.0
04BE:  BCF    F94.0
04C0:  RETURN 0
04C2:  MOVLW  08
04C4:  MOVWF  x78
04C6:  MOVFF  00,79
04CA:  BSF    F94.0
04CC:  NOP   
04CE:  BSF    F94.1
04D0:  BTFSS  F82.1
04D2:  BRA    04D0
04D4:  BTFSC  F82.0
04D6:  BSF    FD8.0
04D8:  BTFSS  F82.0
04DA:  BCF    FD8.0
04DC:  RLCF   01,F
04DE:  NOP   
04E0:  BCF    F94.1
04E2:  BCF    F8B.1
04E4:  DECFSZ x78,F
04E6:  BRA    04CA
04E8:  BSF    F94.0
04EA:  NOP   
04EC:  BCF    F8B.0
04EE:  MOVF   x79,W
04F0:  BTFSS  FD8.2
04F2:  BCF    F94.0
04F4:  NOP   
04F6:  BSF    F94.1
04F8:  BTFSS  F82.1
04FA:  BRA    04F8
04FC:  NOP   
04FE:  BCF    F8B.1
0500:  BCF    F94.1
0502:  NOP   
0504:  BCF    F8B.0
0506:  BCF    F94.0
0508:  RETURN 0
.................... 
.................... 
.................... 
.................... /* 
.................... Parameters are stored in EEPROM
.................... */
.................... #define PARAM_CRC_ADDRESS  0x00
.................... #define PARAM_ADDRESS      PARAM_CRC_ADDRESS+2
.................... 
.................... 
.................... #define INA228_A_ADDR      0x80
.................... #define INA228_B_ADDR      0x9a
.................... 
.................... 
.................... 
.................... 
.................... typedef struct {
.................... 	int8 serial_prefix;
.................... 	int16 serial_number;
.................... 	int16 startup_power_on_delay;
.................... } struct_config;
.................... 
.................... 
.................... 
.................... typedef struct {
.................... 	int32 vbus_a, vshunt_a;
.................... 	int32 vbus_b, vshunt_b;
.................... 
.................... 	int16 count_a_last_second, count_b_last_second;
.................... 
.................... 	int32 count_a_long;
.................... 	int32 count_b_long;
.................... 	int32 count_seconds_long;
.................... 
.................... 	int16 dietemp_a;
.................... 	int16 dietemp_b;
.................... } struct_current;
.................... 
.................... typedef struct {
.................... 	/* action flags */
.................... 	int1 now_millisecond;
.................... 
.................... 	int1 now_ina;    // query ina registers
.................... 
.................... 	/* timers */
.................... 	int8 led_on_a;
.................... } struct_time_keep;
.................... 
.................... /* global structures */
.................... struct_current current={0};
.................... struct_current next={0};
.................... struct_time_keep timers={0};
.................... 
.................... #include "ina228.c"
.................... #define INA228_REG_CONFIG       0x00  // 16 bits, configuration
.................... #define INA228_REG_ADC_CONFIG   0x01  // 16 bits, ADC configuration
.................... #define INA228_REG_SHUNT_CAL    0x02  // 16 bits, shunt calibration
.................... #define INA228_REG_SHUNT_TEMPCO 0x03  // 16 bits, shunt temperature coefficient
.................... #define INA228_REG_VSHUNT       0x04  // 24 bits, shunt voltage measurement
.................... #define INA228_REG_VBUS         0x05  // 24 bits, bus voltage measurement
.................... #define INA228_REG_DIETEMP      0x06  // 16 bits, temperature measurement
.................... #define INA228_REG_CURRENT      0x07  // 24 bits, current result
.................... #define INA228_REG_POWER        0x08  // 24 bits, power result 
.................... #define INA228_REG_ENERGY       0x09  // 40 bits, energy result
.................... #define INA228_REG_CHARGE       0x0a  // 40 bits, charge result
.................... #define INA228_REG_DIAG_ALRT    0x0b  // 16 bits, diagnostic flags and alert
.................... #define INA228_REG_SOVL         0x0c  // 16 bits, shunt overvoltage threshold
.................... #define INA228_REG_SUVL         0x0d  // 16 bits, shunt undervoltage threshold
.................... #define INA228_REG_BOVL         0x0e  // 16 bits, bus overvoltage threshold
.................... #define INA228_REG_BUVL         0x0f  // 16 bits, bus undervoltage threshold
.................... #define INA228_REG_TEMP_LIMIT   0x10  // 16 bits, temperature over-limit threshold
.................... #define INA228_REG_PWR_LIMIT    0x11  // 16 bits, power over-limit threshold
.................... #define INA228_REG_MFG_ID       0x3e  // 16 bits, manufacturer ID
.................... #define INA228_REG_DEVICE_ID    0x3f  // 16 bits, device ID
.................... 
.................... #define INA228_I2C_WRITE        0x00
.................... #define INA228_I2C_READ         0x01 
.................... 
.................... 
.................... int16 ina228_read16(int8 i2c_address, int8 regaddr) {
.................... 	int16 data;
.................... 
.................... 	i2c_start(STREAM_MASTER);
*
05A8:  BSF    F94.0
05AA:  NOP   
05AC:  BSF    F94.1
05AE:  NOP   
05B0:  BCF    F8B.0
05B2:  BCF    F94.0
05B4:  NOP   
05B6:  BCF    F8B.1
05B8:  BCF    F94.1
.................... 	delay_us(15);
05BA:  MOVLW  13
05BC:  MOVWF  00
05BE:  DECFSZ 00,F
05C0:  BRA    05BE
05C2:  BRA    05C4
.................... 	i2c_write(STREAM_MASTER,i2c_address);
05C4:  MOVFF  6F,76
05C8:  RCALL  047A
.................... 	i2c_write(STREAM_MASTER,regaddr);
05CA:  MOVFF  70,76
05CE:  RCALL  047A
.................... 	i2c_start(STREAM_MASTER);
05D0:  BSF    F94.0
05D2:  NOP   
05D4:  BSF    F94.1
05D6:  NOP   
05D8:  BTFSS  F82.1
05DA:  BRA    05D8
05DC:  BCF    F8B.0
05DE:  BCF    F94.0
05E0:  NOP   
05E2:  BCF    F8B.1
05E4:  BCF    F94.1
.................... 	delay_us(15);
05E6:  MOVLW  13
05E8:  MOVWF  00
05EA:  DECFSZ 00,F
05EC:  BRA    05EA
05EE:  BRA    05F0
.................... 	i2c_write(STREAM_MASTER,i2c_address | INA228_I2C_READ);  // read cycle
05F0:  MOVF   x6F,W
05F2:  IORLW  01
05F4:  MOVWF  x73
05F6:  MOVWF  x76
05F8:  RCALL  047A
.................... 	data=make16(i2c_read(STREAM_MASTER,1),i2c_read(STREAM_MASTER,0));                                 
05FA:  MOVLW  01
05FC:  MOVWF  00
05FE:  RCALL  04C2
0600:  MOVFF  01,73
0604:  CLRF   00
0606:  RCALL  04C2
0608:  MOVFF  73,72
060C:  MOVFF  01,71
.................... 	i2c_stop(STREAM_MASTER);
0610:  BCF    F94.0
0612:  NOP   
0614:  BSF    F94.1
0616:  BTFSS  F82.1
0618:  BRA    0616
061A:  NOP   
061C:  BRA    061E
061E:  NOP   
0620:  BSF    F94.0
0622:  NOP   
.................... 
.................... 	return data;
0624:  MOVFF  71,01
0628:  MOVFF  72,02
062C:  RETURN 0
.................... }
.................... 
.................... int32 ina228_read24(int8 i2c_address, int8 regaddr) {
.................... 	int32 data;
.................... 
.................... 	i2c_start(STREAM_MASTER);
*
050A:  BSF    F94.0
050C:  NOP   
050E:  BSF    F94.1
0510:  NOP   
0512:  BCF    F8B.0
0514:  BCF    F94.0
0516:  NOP   
0518:  BCF    F8B.1
051A:  BCF    F94.1
.................... 	delay_us(15);
051C:  MOVLW  13
051E:  MOVWF  00
0520:  DECFSZ 00,F
0522:  BRA    0520
0524:  BRA    0526
.................... 	i2c_write(STREAM_MASTER,i2c_address);
0526:  MOVFF  6F,76
052A:  RCALL  047A
.................... 	i2c_write(STREAM_MASTER,regaddr);
052C:  MOVFF  70,76
0530:  RCALL  047A
.................... 	i2c_start(STREAM_MASTER);
0532:  BSF    F94.0
0534:  NOP   
0536:  BSF    F94.1
0538:  NOP   
053A:  BTFSS  F82.1
053C:  BRA    053A
053E:  BCF    F8B.0
0540:  BCF    F94.0
0542:  NOP   
0544:  BCF    F8B.1
0546:  BCF    F94.1
.................... 	delay_us(15);
0548:  MOVLW  13
054A:  MOVWF  00
054C:  DECFSZ 00,F
054E:  BRA    054C
0550:  BRA    0552
.................... 	i2c_write(STREAM_MASTER,i2c_address | INA228_I2C_READ);  // read cycle
0552:  MOVF   x6F,W
0554:  IORLW  01
0556:  MOVWF  x75
0558:  MOVWF  x76
055A:  RCALL  047A
.................... 	data=make32(0,i2c_read(STREAM_MASTER,1),i2c_read(STREAM_MASTER,1),i2c_read(STREAM_MASTER,0));
055C:  MOVLW  01
055E:  MOVWF  00
0560:  RCALL  04C2
0562:  MOVFF  01,75
0566:  MOVLW  01
0568:  MOVWF  00
056A:  RCALL  04C2
056C:  MOVFF  01,76
0570:  CLRF   00
0572:  RCALL  04C2
0574:  CLRF   x74
0576:  MOVFF  75,73
057A:  MOVFF  76,72
057E:  MOVFF  01,71
.................... 	i2c_stop(STREAM_MASTER);
0582:  BCF    F94.0
0584:  NOP   
0586:  BSF    F94.1
0588:  BTFSS  F82.1
058A:  BRA    0588
058C:  NOP   
058E:  BRA    0590
0590:  NOP   
0592:  BSF    F94.0
0594:  NOP   
.................... 
.................... 	return data;
0596:  MOVFF  71,00
059A:  MOVFF  72,01
059E:  MOVFF  73,02
05A2:  MOVFF  74,03
05A6:  RETURN 0
.................... }
.................... 
.................... void ina228_write16(int8 i2c_address, int8 regaddr, int16 value) {
.................... 	i2c_start(STREAM_MASTER);
.................... 	delay_us(15);                                                 
.................... 	i2c_write(STREAM_MASTER,i2c_address); // write cycle                       
.................... 	i2c_write(STREAM_MASTER,regaddr);  // write cycle         
.................... 	i2c_write(STREAM_MASTER,make8(value,1));
.................... 	i2c_write(STREAM_MASTER,make8(value,0));
.................... 	i2c_stop(STREAM_MASTER);
.................... }
.................... 
.................... void ina228_init(int8 i2c_address) {
.................... 	ina228_write16(i2c_address,INA228_REG_CONFIG,0b1000000000000000);
.................... }
.................... 
.................... #include "i2c_handler_dcswc_module_voltage_current_counter.c"
.................... #include "registers_dcswc_module_voltage_current_counter.h"
.................... /* 32 bit INA228 bus and shunt voltages */
.................... #define I2C_REG_VBUS_A_MSW                    0
.................... #define I2C_REG_VBUS_A_LSW                    1
.................... #define I2C_REG_VSHUNT_A_MSW                  2
.................... #define I2C_REG_VSHUNT_A_LSW                  3
.................... 
.................... #define I2C_REG_VBUS_B_MSW                    4
.................... #define I2C_REG_VBUS_B_LSW                    5
.................... #define I2C_REG_VSHUNT_B_MSW                  6
.................... #define I2C_REG_VSHUNT_B_LSW                  7
.................... 
.................... /* 16 bit count of last (not current) second */
.................... #define I2C_REG_COUNT_A_LAST_SECOND           8
.................... #define I2C_REG_COUNT_B_LAST_SECOND           9
.................... 
.................... /* 32 bit count since reset */
.................... #define I2C_REG_COUNT_A_LONG_MSW              10
.................... #define I2C_REG_COUNT_A_LONG_LSW              11
.................... #define I2C_REG_COUNT_B_LONG_MSW              12
.................... #define I2C_REG_COUNT_B_LONG_LSW              13
.................... 
.................... /* 32 bit seconds since count reset */
.................... #define I2C_REG_COUNT_LONG_SECONDS_MSW        14
.................... #define I2C_REG_COUNT_LONG_SECONDS_LSW        15
.................... 
.................... /* 16 bit INA228 die temperatures */
.................... #define I2C_REG_DIETEMP_A                     16
.................... #define I2C_REG_DIETEMP_B                     17
.................... 
.................... 
.................... void write_i2c(int8 address, int16 value) {
.................... 	switch ( address ) {
*
01BA:  MOVF   x8C,W
.................... #if 0
.................... 		case I2C_REG_LED_A: 
.................... 			timers.led_on_a=make8(value,0);
.................... 			break;
.................... 		case I2C_REG_LED_B: 
.................... 			timers.led_on_b=make8(value,0);
.................... 			break;
.................... 		case I2C_REG_TIME_WATCHDOG_WRITE_SECONDS:
.................... 			timers.write_watchdog_seconds=0;
.................... 			break;
.................... 		case I2C_REG_COMMAND_OFF:
.................... 			timers.command_off_seconds=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_SERIAL_PREFIX: 
.................... 			if ( current.factory_unlocked && value >= 'A' && value <='Z' ) 
.................... 				config.serial_prefix=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_SERIAL_NUMBER:
.................... 			if (  current.factory_unlocked  ) {
.................... 				config.serial_number=value;
.................... 			}
.................... 			break;
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			if ( 1 == value ) {
.................... 				timers.now_write_config=1;
.................... 			} else if ( 2 == value ) {
.................... 				timers.now_reset_config=1;
.................... 			} else if ( 1802 == value ) {
.................... 				current.factory_unlocked =1;
.................... 			} else if ( 65535 == value ) {
.................... 				reset_cpu();
.................... 			}
.................... 			break;
.................... 		case I2C_REG_CONFIG_TICKS_ADC:
.................... 			config.adc_sample_ticks=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_STARTUP_POWER_ON_DELAY:
.................... 			config.startup_power_on_delay=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_COMMAND_OFF_HOLD_TIME:
.................... 			config.command_off_hold_time=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_READ_WATCHDOG_OFF_THRESHOLD:
.................... 			config.read_watchdog_off_threshold=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_READ_WATCHDOG_OFF_HOLD_TIME:
.................... 			config.read_watchdog_off_hold_time=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_WRITE_WATCHDOG_OFF_THRESHOLD:
.................... 			config.write_watchdog_off_threshold=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_WRITE_WATCHDOG_OFF_HOLD_TIME:
.................... 			config.write_watchdog_off_hold_time=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_LVD_DISCONNECT_VOLTAGE:
.................... 			config.lvd_disconnect_adc=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_LVD_DISCONNECT_DELAY:
.................... 			config.lvd_disconnect_delay=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_LVD_RECONNECT_VOLTAGE:
.................... 			config.lvd_reconnect_adc=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_HVD_DISCONNECT_VOLTAGE:
.................... 			config.hvd_disconnect_adc=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_HVD_DISCONNECT_DELAY:
.................... 			config.hvd_disconnect_delay=value;
.................... 			break;
.................... 		case I2C_REG_CONFIG_HVD_RECONNECT_VOLTAGE:
.................... 			config.hvd_reconnect_adc=value;
.................... 			break;
.................... #endif
.................... 		default:
.................... 			/* do nothing */
.................... 	}
01BC:  GOTO   0260 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... int16 map_i2c(int8 addr) {
.................... 
.................... 	timers.led_on_a=100;
01C0:  MOVLW  64
01C2:  MOVWF  x63
.................... 
.................... 
.................... 
.................... 	switch ( addr ) {
01C4:  MOVF   x8B,W
.................... #if 0
.................... 		/* analog channels */
.................... 		/* input voltage */
.................... 		case I2C_REG_VOLTAGE_INPUT_NOW: 
.................... 			return (int16) current.adc_buffer[0][current.adc_buffer_index];
.................... 		case I2C_REG_VOLTAGE_INPUT_AVG: 
.................... 			return (int16) adc_get(0);
.................... 
.................... 		/* temperature sensor */
.................... 		case I2C_REG_TEMPERATURE_BOARD_NOW: 
.................... 			return (int16) current.adc_buffer[1][current.adc_buffer_index];
.................... 		case I2C_REG_TEMPERATURE_BOARD_AVG: 
.................... 			return (int16) adc_get(1);
.................... #endif
.................... 
.................... #if 0
.................... 		/* switch channels */
.................... 		case I2C_REG_SWITCH_MAGNET_NOW: 
.................... 			return (int16) ! input(SW_MAGNET);
.................... 		case I2C_REG_SWITCH_MAGNET_LATCH: 
.................... 			return (int16) current.latch_sw_magnet;
.................... #endif
.................... 
.................... #if 0		
.................... 		/* status */
.................... 		case I2C_REG_SEQUENCE_NUMBER: 
.................... 			return (int16) current.sequence_number++;
.................... 		case I2C_REG_TIME_INTERVAL_MILLISECONDS: 
.................... 			return (int16) current.interval_milliseconds; /* milliseconds since last query */
.................... 		case I2C_REG_TIME_UPTIME_MINUTES: 
.................... 			return (int16) current.uptime_minutes; 
.................... 		case I2C_REG_TIME_WATCHDOG_READ_SECONDS: 
.................... 			return (int16) timers.read_watchdog_seconds; 
.................... 		case I2C_REG_TIME_WATCHDOG_WRITE_SECONDS: 
.................... 			return (int16) timers.write_watchdog_seconds;
.................... 		case I2C_REG_DEFAULT_PARAMS_WRITTEN:
.................... 			return (int16) current.default_params_written;
.................... 		case I2C_REG_COMMAND_OFF:
.................... 			return (int16) timers.command_off_seconds;
.................... 		case I2C_REG_POWER_OFF_FLAGS:
.................... 			return (int16) current.power_off_flags;
.................... 
.................... 
.................... 		/* configuration */
.................... 		case I2C_REG_CONFIG_SERIAL_PREFIX: 
.................... 			return (int16) config.serial_prefix;
.................... 		case I2C_REG_CONFIG_SERIAL_NUMBER: 
.................... 			return (int16) config.serial_number;
.................... 		case I2C_REG_CONFIG_HARDWARE_MODEL: 
.................... 			return (int16) 'P';
.................... 		case I2C_REG_CONFIG_HARDWARE_VERSION: 
.................... 			return (int16) 'Z';
.................... 		case I2C_REG_CONFIG_SOFTWARE_MODEL: 
.................... 			return (int16) 'P';
.................... 		case I2C_REG_CONFIG_SOFTWARE_VERSION: 
.................... 			return (int16) 3;
.................... 		case I2C_REG_CONFIG_SOFTWARE_YEAR:
.................... 			return (int16) current.compile_year;
.................... 		case I2C_REG_CONFIG_SOFTWARE_MONTH:
.................... 			return (int16) current.compile_month;
.................... 		case I2C_REG_CONFIG_SOFTWARE_DAY:
.................... 			return (int16) current.compile_day;
.................... 
.................... 		case I2C_REG_CONFIG_PARAM_WRITE:
.................... 			/* 1 if factory unlocked */ 
.................... 			return (int16) current.factory_unlocked; 	
.................... 		case I2C_REG_CONFIG_TICKS_ADC: 
.................... 			return (int16) config.adc_sample_ticks;
.................... 		case I2C_REG_CONFIG_STARTUP_POWER_ON_DELAY: 
.................... 			return (int16) config.startup_power_on_delay;
.................... 		case I2C_REG_CONFIG_COMMAND_OFF_HOLD_TIME:
.................... 			return (int16) config.command_off_hold_time;
.................... 		case I2C_REG_CONFIG_READ_WATCHDOG_OFF_THRESHOLD:
.................... 			return (int16) config.read_watchdog_off_threshold;
.................... 		case I2C_REG_CONFIG_READ_WATCHDOG_OFF_HOLD_TIME:
.................... 			return (int16) config.read_watchdog_off_hold_time;
.................... 		case I2C_REG_CONFIG_WRITE_WATCHDOG_OFF_THRESHOLD:
.................... 			return (int16) config.write_watchdog_off_threshold;
.................... 		case I2C_REG_CONFIG_WRITE_WATCHDOG_OFF_HOLD_TIME:
.................... 			return (int16) config.write_watchdog_off_hold_time;
.................... 		case I2C_REG_CONFIG_LVD_DISCONNECT_VOLTAGE:
.................... 			return (int16) config.lvd_disconnect_adc;
.................... 		case I2C_REG_CONFIG_LVD_DISCONNECT_DELAY:
.................... 			return (int16) config.lvd_disconnect_delay;
.................... 		case I2C_REG_CONFIG_LVD_RECONNECT_VOLTAGE:
.................... 			return (int16) config.lvd_reconnect_adc;
.................... 		case I2C_REG_CONFIG_HVD_DISCONNECT_VOLTAGE:
.................... 			return (int16) config.hvd_disconnect_adc;
.................... 		case I2C_REG_CONFIG_HVD_DISCONNECT_DELAY:
.................... 			return (int16) config.hvd_disconnect_delay;
.................... 		case I2C_REG_CONFIG_HVD_RECONNECT_VOLTAGE:
.................... 			return (int16) config.hvd_reconnect_adc;
.................... #endif
.................... 
.................... 		/* we should have range checked, and never gotten here ... or read unimplemented (future) register */
.................... 		default: return (int16) addr;
01C6:  MOVFF  8B,01
01CA:  CLRF   02
.................... 	}
01CC:  GOTO   0274 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "interrupt_dcswc_module_voltage_current_counter.c"
.................... #int_timer2
.................... void isr_timer2() {
.................... 	static int16 ticks=0;
.................... 	static short count_a_last=0;
.................... 	static short count_b_last=0;
.................... 	short count_a_now;
.................... 	short count_b_now;
.................... 
.................... 
.................... 	/* external input counting */
.................... 	count_a_now=input(COUNT_A);
*
00BA:  BSF    F94.4
00BC:  BCF    x88.0
00BE:  BTFSC  F82.4
00C0:  BSF    x88.0
.................... 	if ( 0 == count_a_now && 1 == count_a_last ) {
00C2:  BTFSC  x88.0
00C4:  BRA    00D0
00C6:  BTFSS  x66.0
00C8:  BRA    00D0
.................... 		next.count_a_last_second++;
00CA:  INCF   4E,F
00CC:  BTFSC  FD8.2
00CE:  INCF   4F,F
.................... 	}
.................... 	count_a_last=count_a_now;
00D0:  BCF    x66.0
00D2:  BTFSC  x88.0
00D4:  BSF    x66.0
.................... 
.................... 	count_b_now=input(COUNT_B);
00D6:  BSF    F94.5
00D8:  BCF    x88.1
00DA:  BTFSC  F82.5
00DC:  BSF    x88.1
.................... 	if ( 0 == count_b_now && 1 == count_b_last ) {
00DE:  BTFSC  x88.1
00E0:  BRA    00EC
00E2:  BTFSS  x66.1
00E4:  BRA    00EC
.................... 		next.count_b_last_second++;
00E6:  INCF   50,F
00E8:  BTFSC  FD8.2
00EA:  INCF   51,F
.................... 	}
.................... 	count_b_last=count_b_now;
00EC:  BCF    x66.1
00EE:  BTFSC  x88.1
00F0:  BSF    x66.1
.................... 
.................... 
.................... 	/* timing */
.................... 
.................... 	timers.now_millisecond=1;
00F2:  BSF    x62.0
.................... 
.................... 	ticks++;
00F4:  INCF   x64,F
00F6:  BTFSC  FD8.2
00F8:  INCF   x65,F
.................... 	if ( 500 == ticks ) {
00FA:  MOVF   x64,W
00FC:  SUBLW  F4
00FE:  BNZ   0108
0100:  DECFSZ x65,W
0102:  BRA    0108
.................... 		timers.now_ina=1;
0104:  BSF    x62.1
.................... 	} else if ( 1000 == ticks ) {
0106:  BRA    01B0
0108:  MOVF   x64,W
010A:  SUBLW  E8
010C:  BNZ   01B0
010E:  MOVF   x65,W
0110:  SUBLW  03
0112:  BNZ   01B0
.................... //		timers.now_strobe=1;
.................... 		output_high(TP2);
0114:  BCF    F94.2
0116:  BSF    F8B.2
.................... 
.................... 		current.vbus_a=next.vbus_a;
0118:  MOVFF  41,1D
011C:  MOVFF  40,1C
0120:  MOVFF  3F,1B
0124:  MOVFF  3E,1A
.................... 		current.vshunt_a=next.vshunt_a;
0128:  MOVFF  45,21
012C:  MOVFF  44,20
0130:  MOVFF  43,1F
0134:  MOVFF  42,1E
.................... 		current.dietemp_a=next.dietemp_a;	
0138:  MOVFF  5F,3B
013C:  MOVFF  5E,3A
.................... 
.................... 		current.vbus_b=next.vbus_b;
0140:  MOVFF  49,25
0144:  MOVFF  48,24
0148:  MOVFF  47,23
014C:  MOVFF  46,22
.................... 		current.vshunt_b=next.vshunt_b;
0150:  MOVFF  4D,29
0154:  MOVFF  4C,28
0158:  MOVFF  4B,27
015C:  MOVFF  4A,26
.................... 		current.dietemp_b=next.dietemp_b;
0160:  MOVFF  61,3D
0164:  MOVFF  60,3C
.................... 
.................... 		current.count_a_last_second=next.count_a_last_second;
0168:  MOVFF  4F,2B
016C:  MOVFF  4E,2A
.................... 
.................... 		current.count_b_last_second=next.count_b_last_second;	
0170:  MOVFF  51,2D
0174:  MOVFF  50,2C
.................... 
.................... 		current.count_a_long += current.count_a_last_second;
0178:  MOVF   2A,W
017A:  ADDWF  2E,F
017C:  MOVF   2B,W
017E:  ADDWFC 2F,F
0180:  MOVLW  00
0182:  ADDWFC 30,F
0184:  ADDWFC 31,F
.................... 		current.count_b_long += current.count_b_last_second;
0186:  MOVF   2C,W
0188:  ADDWF  32,F
018A:  MOVF   2D,W
018C:  ADDWFC 33,F
018E:  MOVLW  00
0190:  ADDWFC 34,F
0192:  ADDWFC 35,F
.................... 	
.................... 		current.count_seconds_long++;
0194:  MOVLW  01
0196:  ADDWF  36,F
0198:  BTFSC  FD8.0
019A:  INCF   37,F
019C:  BTFSC  FD8.2
019E:  INCF   38,F
01A0:  BTFSC  FD8.2
01A2:  INCF   39,F
.................... 
.................... 		/* reset our counters */
.................... 		next.count_a_last_second=0;
01A4:  CLRF   4F
01A6:  CLRF   4E
.................... 		next.count_b_last_second=0;
01A8:  CLRF   51
01AA:  CLRF   50
.................... 
.................... 		ticks=0;
01AC:  CLRF   x65
01AE:  CLRF   x64
.................... 	}
.................... 
.................... 	output_low(TP2);
01B0:  BCF    F94.2
01B2:  BCF    F8B.2
.................... }
.................... 
.................... 
.................... 
.................... #if 1
.................... 
.................... 	/*
.................... .................... 	state = i2c_isr_state();
.................... *
.................... 025A:  BTFSC  FC7.5	// if data, go to 0264
.................... 025C:  BRA    0264
.................... 
.................... 025E:  CLRF   x9D	// set i=0 
.................... 
.................... 0260:  BTFSC  FC7.2	// if read, then set high bit of i 
.................... 0262:  BSF    x9D.7
.................... 
.................... 0264:  MOVF   x9D,W // increment i and put result in state
.................... 0266:  INCF   x9D,F
.................... 0268:  MOVWF  xC7
.................... 
.................... 	x9D is static variable for state
.................... 	xC7 is returned value of state
.................... */
.................... 
.................... /*
.................... .................... 	state = i2c_isr_state();
.................... 025A:  BTFSC  FC7.5 // bit test SSPSTAT.5, skip instruction below if DATA/!ADDRESS is indicating address
.................... 025C:  BRA    0264  // goto 0264
.................... 
.................... 025E:  CLRF   x9F   // set x9F to 0
.................... 0260:  BTFSC  FC7.2 // bit test SSPSTAT.2, skip instruction below if READ/!WRITE is indicating write
.................... 0262:  BSF    x9F.7 // set the high bit of x9F
.................... 
.................... 0264:  MOVF   x9F,W	// move x9F to W register
.................... 0266:  INCF   x9F,F // increment x9F
.................... 0268:  MOVWF  x9A	// move W to x9A (ie move x9F to x9A)
.................... 
.................... that makes 9a the value of state that is used by the program and x9F as a static state variable
.................... */
.................... 
.................... 
01B4:  BCF    F9E.1
01B6:  GOTO   006C
.................... #byte SSPSTAT=GETENV("SFR:SSPSTAT")
.................... #INT_SSP
.................... void ssp_interrupt () {
.................... 	static int8 sstate;
.................... 	int8 state;
.................... 	int8 incoming;
.................... 	static int16 lastValue;
.................... 	static int8 lastMSB;
.................... 	static int8 address;
.................... 
.................... 
.................... //	state = i2c_isr_state(STREAM_SLAVE);
.................... 
.................... 
.................... 	/* 
.................... 	our implementation of i2c_isr_state() that won't overflow and switch states
.................... 
.................... 	but it will quit counting at 127 bytes. 
.................... 
.................... 	If more bytes are needed, external counting variables can be used or the size of state can be made larger
.................... 	*/
.................... 
.................... 
.................... 	if ( ! bit_test(SSPSTAT,5) ) {
*
01E6:  BTFSC  FC7.5
01E8:  BRA    01F2
.................... 		/* address */
.................... 		sstate=0;
01EA:  CLRF   x67
.................... 
.................... 		if ( bit_test(SSPSTAT,2) ) {
01EC:  BTFSS  FC7.2
01EE:  BRA    01F2
.................... 			/* set high bit if read */
.................... 			bit_set(sstate,7);
01F0:  BSF    x67.7
.................... 		}
.................... 	} else {
.................... 		/* data */
.................... 	}
.................... 
.................... 	/* state variable used below is not incremented */
.................... 	state=sstate;
01F2:  MOVFF  67,88
.................... 
.................... 	/* increment the state counter for next pass through unless it will overflow us into another state */
.................... 	if ( sstate != 0x7f && sstate != 0xff) {
01F6:  MOVF   x67,W
01F8:  SUBLW  7F
01FA:  BZ    0204
01FC:  INCFSZ x67,W
01FE:  BRA    0202
0200:  BRA    0204
.................... 		sstate++;
0202:  INCF   x67,F
.................... 	}
.................... 
.................... 	
.................... 	/* i2c_isr_state() return an 8 bit int
.................... 		0 - Address match received with R/W bit clear, perform i2c_read( ) to read the I2C address.
.................... 
.................... 		1-0x7F - Master has written data; i2c_read() will immediately return the data
.................... 
.................... 		0x80 - Address match received with R/W bit set; perform i2c_read( ) to read the I2C address,
.................... 		and use i2c_write( ) to pre-load the transmit buffer for the next transaction (next I2C read
.................... 		performed by master will read this byte).
.................... 
.................... 		0x81-0xFF - Transmission completed and acknowledged; respond with i2c_write() to pre-load
.................... 		the transmit buffer for the next transition (the next I2C read performed by master will read this
.................... 		byte).
.................... 
.................... 		Function:
.................... 		Returns the state of I2C communications in I2C slave mode after an SSP interrupt. The return
.................... 		value increments with each byte received or sent.
.................... 		If 0x00 or 0x80 is returned, an i2C_read( ) needs to be performed to read the I2C address that
.................... 		was sent (it will match the address configured by #USE I2C so this value can be ignored)
.................... 	*/
.................... 
.................... 	if ( state <= 0x80 ) {                      
0204:  MOVF   x88,W
0206:  SUBLW  80
0208:  BNC   0260
.................... 		/* I2C master is sending us data */
.................... 		if ( 0x80 == state ) {
020A:  MOVF   x88,W
020C:  SUBLW  80
020E:  BNZ   0216
.................... 			/* i2c_read(2) casues the function to read the SSPBUF without releasing the clock */
.................... 			incoming = i2c_read(STREAM_SLAVE,2);
0210:  MOVFF  FC9,89
.................... 		} else {
0214:  BRA    0222
.................... 			incoming = i2c_read(STREAM_SLAVE);
0216:  BCF    FC6.6
0218:  BTFSS  FC7.0
021A:  BRA    0218
021C:  MOVF   FC9,W
021E:  BSF    FC6.4
0220:  MOVWF  x89
.................... 		}
.................... 
.................... 		if ( 1 == state ) {      
0222:  DECFSZ x88,W
0224:  BRA    022C
.................... 			/* first byte is address */                
.................... 			address = incoming;
0226:  MOVFF  89,6B
.................... 		} else if ( state >= 2 && 0x80 != state ) {
022A:  BRA    0260
022C:  MOVF   x88,W
022E:  SUBLW  01
0230:  BC    0260
0232:  MOVF   x88,W
0234:  SUBLW  80
0236:  BZ    0260
.................... 			/* received byte is data */
.................... 		
.................... 			/* save MSB and we'll process it on next */
.................... 			if ( 2 == state ) {
0238:  MOVF   x88,W
023A:  SUBLW  02
023C:  BNZ   0244
.................... 				lastMSB=incoming;
023E:  MOVFF  89,6A
.................... 			} else if ( 3 == state ) {
0242:  BRA    0260
0244:  MOVF   x88,W
0246:  SUBLW  03
0248:  BNZ   0260
.................... 				/* 16 bit value made of previous byte and this byte */
.................... 				write_i2c(address,make16(lastMSB,incoming));
024A:  MOVFF  6A,8B
024E:  MOVFF  89,8A
0252:  MOVFF  6B,8C
0256:  MOVFF  6A,8E
025A:  MOVFF  89,8D
025E:  BRA    01BA
.................... 			}
.................... 		}
.................... 	}
.................... 
.................... 
.................... 	if ( state >= 0x80 ) {
0260:  MOVF   x88,W
0262:  SUBLW  7F
0264:  BC    0294
.................... 		/* I2C master is requesting data from us */
.................... 
.................... 		if ( ! bit_test(address,0) ) {
0266:  BTFSC  x6B.0
0268:  BRA    0288
.................... 			/* read 16 bit register (register address half of I2C address) on even address */
.................... 			lastValue=map_i2c(address>>1);
026A:  BCF    FD8.0
026C:  RRCF   x6B,W
026E:  MOVWF  x8A
0270:  MOVWF  x8B
0272:  BRA    01C0
0274:  MOVFF  02,69
0278:  MOVFF  01,68
.................... 
.................... 			/* send the MSB */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,1));
027C:  MOVFF  69,8A
0280:  MOVFF  69,8B
0284:  RCALL  01D0
.................... 		} else {
0286:  BRA    0292
.................... 			/* send LSB of 16 bit register on odd address */
.................... 			i2c_write(STREAM_SLAVE,make8(lastValue,0));
0288:  MOVFF  68,8A
028C:  MOVFF  68,8B
0290:  RCALL  01D0
.................... 		}
.................... 
.................... 		address++;
0292:  INCF   x6B,F
.................... 	}
.................... 
.................... 	/* reset watchdog timer */
.................... //	timers.read_watchdog_seconds=0;
.................... }
0294:  BCF    F9E.3
0296:  GOTO   006C
.................... #endif
.................... 
.................... 
.................... 
.................... void init(void) {
.................... 	setup_vref(VREF_OFF);
*
03D6:  CLRF   FBA
.................... 	setup_dac(DAC_OFF);
03D8:  CLRF   FBB
.................... 	setup_adc(ADC_OFF);
03DA:  BCF    FC2.0
.................... 	setup_adc_ports(NO_ANALOGS);
03DC:  MOVLW  00
03DE:  MOVWF  F7E
03E0:  BCF    FC1.0
03E2:  BCF    FC1.1
03E4:  BCF    FC1.2
03E6:  BCF    FC1.3
03E8:  MOVWF  F7F
.................... 
.................... 
.................... 
.................... 	set_tris_a    (0b00111111);
03EA:  MOVLW  3F
03EC:  MOVWF  F92
.................... 	port_a_pullups(0b00110000);
03EE:  MOVLW  30
03F0:  MOVWF  F77
03F2:  BCF    FF1.7
.................... //                   76543210
.................... 
.................... 	set_tris_b    (0b01110000);
03F4:  MOVLW  70
03F6:  MOVWF  F93
.................... 	port_b_pullups(0b00000000);
03F8:  CLRF   F78
.................... //                   76543210
.................... 
.................... 	set_tris_c    (0b11110011);
03FA:  MOVLW  F3
03FC:  MOVWF  F94
.................... //                   76543210
.................... 
.................... 
.................... 	/* data structure initialization */
.................... 	/* all initialized to 0 on declaration. Just do this if need non-zero */
.................... 
.................... 
.................... 	/* one periodic interrupt @ 1mS. Generated from system 16 MHz clock */
.................... 	/* prescale=16, match=249, postscale=1. Match is 249 because when match occurs, one cycle is lost */
.................... 	setup_timer_2(T2_DIV_BY_16,249,1);
03FE:  MOVLW  00
0400:  IORLW  06
0402:  MOVWF  FCA
0404:  MOVLW  F9
0406:  MOVWF  FCB
.................... 
.................... 	enable_interrupts(INT_TIMER2);
0408:  BSF    F9D.1
040A:  GOTO   0A9E (RETURN)
.................... }
.................... 
.................... int8 read_dip_switch(void) {
.................... 	return input(PIC_ADDR_MSB)<<1 | input(PIC_ADDR_LSB);
*
06EE:  BSF    F94.6
06F0:  MOVLW  00
06F2:  BTFSC  F82.6
06F4:  MOVLW  01
06F6:  MOVWF  00
06F8:  BCF    FD8.0
06FA:  RLCF   00,W
06FC:  MOVWF  x6F
06FE:  BSF    F94.5
0700:  MOVLW  00
0702:  BTFSC  F82.5
0704:  MOVLW  01
0706:  IORWF  x6F,W
0708:  MOVWF  01
070A:  GOTO   0B24 (RETURN)
.................... }
.................... 
.................... void action_now_ina(void) {
.................... 	timers.now_ina=0;
*
062E:  BCF    x62.1
.................... 
.................... 	/* sample INA228 at middle of 1 second window */
.................... 	next.vbus_a=ina228_read24(INA228_A_ADDR,INA228_REG_VBUS);
0630:  MOVLW  80
0632:  MOVWF  x6F
0634:  MOVLW  05
0636:  MOVWF  x70
0638:  RCALL  050A
063A:  MOVFF  03,41
063E:  MOVFF  02,40
0642:  MOVFF  01,3F
0646:  MOVFF  00,3E
.................... 	next.vshunt_a=ina228_read24(INA228_A_ADDR,INA228_REG_VSHUNT);
064A:  MOVLW  80
064C:  MOVWF  x6F
064E:  MOVLW  04
0650:  MOVWF  x70
0652:  RCALL  050A
0654:  MOVFF  03,45
0658:  MOVFF  02,44
065C:  MOVFF  01,43
0660:  MOVFF  00,42
.................... 
.................... 	next.vbus_b=ina228_read24(INA228_B_ADDR,INA228_REG_VBUS);
0664:  MOVLW  9A
0666:  MOVWF  x6F
0668:  MOVLW  05
066A:  MOVWF  x70
066C:  RCALL  050A
066E:  MOVFF  03,49
0672:  MOVFF  02,48
0676:  MOVFF  01,47
067A:  MOVFF  00,46
.................... 	next.vshunt_b=ina228_read24(INA228_B_ADDR,INA228_REG_VSHUNT);
067E:  MOVLW  9A
0680:  MOVWF  x6F
0682:  MOVLW  04
0684:  MOVWF  x70
0686:  RCALL  050A
0688:  MOVFF  03,4D
068C:  MOVFF  02,4C
0690:  MOVFF  01,4B
0694:  MOVFF  00,4A
.................... 
.................... 	next.dietemp_a=ina228_read16(INA228_A_ADDR,INA228_REG_DIETEMP);
0698:  MOVLW  80
069A:  MOVWF  x6F
069C:  MOVLW  06
069E:  MOVWF  x70
06A0:  RCALL  05A8
06A2:  MOVFF  02,5F
06A6:  MOVFF  01,5E
.................... 	next.dietemp_b=ina228_read16(INA228_B_ADDR,INA228_REG_DIETEMP);
06AA:  MOVLW  9A
06AC:  MOVWF  x6F
06AE:  MOVLW  06
06B0:  MOVWF  x70
06B2:  RCALL  05A8
06B4:  MOVFF  02,61
06B8:  MOVFF  01,60
06BC:  GOTO   0B16 (RETURN)
.................... }
.................... 
.................... 
.................... void periodic_millisecond(void) {
.................... 	timers.now_millisecond=0;
06C0:  BCF    x62.0
.................... 
.................... 	/* LED control */
.................... 	if ( 0==timers.led_on_a ) {
06C2:  MOVF   x63,F
06C4:  BNZ   06CC
.................... 		output_low(LED_A);
06C6:  BCF    F94.3
06C8:  BCF    F8B.3
.................... 	} else {
06CA:  BRA    06D2
.................... 		output_high(LED_A);
06CC:  BCF    F94.3
06CE:  BSF    F8B.3
.................... 		timers.led_on_a--;
06D0:  DECF   x63,F
.................... 	}
06D2:  GOTO   0B1C (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... int8 get_ack_status(int8 address) {
.................... 	int8 status;
.................... 
.................... 	i2c_start(STREAM_MASTER);
.................... 	status = i2c_write(STREAM_MASTER,address);  // Status = 0 if got an ACK
.................... 	i2c_stop(STREAM_MASTER);
.................... 
.................... 	if ( 0 == status )
.................... 		return(TRUE);
.................... 
....................    return(FALSE);
.................... }
.................... 
.................... 
.................... void main(void) {
*
0A0C:  CLRF   FF8
0A0E:  BCF    FD0.7
0A10:  BSF    07.7
0A12:  BSF    F93.6
0A14:  BSF    F93.4
0A16:  MOVLW  34
0A18:  MOVWF  FC8
0A1A:  MOVLW  36
0A1C:  MOVWF  FC6
0A1E:  BSF    FC5.0
0A20:  BSF    FC5.7
0A22:  CLRF   19
0A24:  BSF    FB8.3
0A26:  MOVLW  A0
0A28:  MOVWF  FAF
0A2A:  MOVLW  01
0A2C:  MOVWF  FB0
0A2E:  MOVLW  A6
0A30:  MOVWF  FAC
0A32:  MOVLW  90
0A34:  MOVWF  FAB
0A36:  CLRF   x6D
0A38:  CLRF   x6C
0A3A:  MOVLW  00
0A3C:  MOVWF  F7E
0A3E:  BCF    FC1.0
0A40:  BCF    FC1.1
0A42:  BCF    FC1.2
0A44:  BCF    FC1.3
0A46:  MOVWF  F7F
0A48:  CLRF   F6C
0A4A:  CLRF   F6B
0A4C:  CLRF   F6D
0A4E:  BCF    x66.0
0A50:  BCF    x66.1
0A52:  BRA    0A5E
0A54:  DATA 4C,40
0A56:  DATA 1A,00
0A58:  DATA 05,40
0A5A:  DATA 67,00
0A5C:  DATA 00,00
0A5E:  MOVLW  00
0A60:  MOVWF  FF8
0A62:  MOVLW  0A
0A64:  MOVWF  FF7
0A66:  MOVLW  54
0A68:  MOVWF  FF6
0A6A:  TBLRD*+
0A6C:  MOVF   FF5,W
0A6E:  MOVWF  00
0A70:  XORLW  00
0A72:  BZ    0A9A
0A74:  TBLRD*+
0A76:  MOVF   FF5,W
0A78:  MOVWF  01
0A7A:  BTFSC  FE8.7
0A7C:  BRA    0A88
0A7E:  ANDLW  3F
0A80:  MOVWF  FEA
0A82:  TBLRD*+
0A84:  MOVFF  FF5,FE9
0A88:  BTFSC  01.6
0A8A:  TBLRD*+
0A8C:  BTFSS  01.6
0A8E:  TBLRD*+
0A90:  MOVFF  FF5,FEE
0A94:  DCFSNZ 00,F
0A96:  BRA    0A6A
0A98:  BRA    0A8C
0A9A:  CLRF   FF8
.................... 	int8 i;
.................... 
.................... 	init();
0A9C:  BRA    03D6
.................... 
.................... 
.................... 
.................... 	/* flash on startup */
.................... 	for ( i=0 ; i<5 ; i++ ) {
0A9E:  CLRF   x6E
0AA0:  MOVF   x6E,W
0AA2:  SUBLW  04
0AA4:  BNC   0AC0
.................... 		restart_wdt();
0AA6:  CLRWDT
.................... 		output_high(LED_A);
0AA8:  BCF    F94.3
0AAA:  BSF    F8B.3
.................... 		delay_ms(200);
0AAC:  MOVLW  C8
0AAE:  MOVWF  x70
0AB0:  RCALL  040E
.................... 		output_low(LED_A);
0AB2:  BCF    F94.3
0AB4:  BCF    F8B.3
.................... 		delay_ms(200);
0AB6:  MOVLW  C8
0AB8:  MOVWF  x70
0ABA:  RCALL  040E
0ABC:  INCF   x6E,F
0ABE:  BRA    0AA0
.................... 	}
.................... 
.................... 	delay_ms(1000);
0AC0:  MOVLW  04
0AC2:  MOVWF  x6F
0AC4:  MOVLW  FA
0AC6:  MOVWF  x70
0AC8:  RCALL  040E
0ACA:  DECFSZ x6F,F
0ACC:  BRA    0AC4
.................... 
.................... 	fprintf(STREAM_FTDI,"# dcswc_module_voltage_current_counter %s\r\n",__DATE__);
0ACE:  MOVLW  9A
0AD0:  MOVWF  FF6
0AD2:  MOVLW  02
0AD4:  MOVWF  FF7
0AD6:  MOVLW  27
0AD8:  MOVWF  x70
0ADA:  RCALL  0436
0ADC:  MOVLW  C6
0ADE:  MOVWF  FF6
0AE0:  MOVLW  02
0AE2:  MOVWF  FF7
0AE4:  BRA    0456
0AE6:  MOVLW  0D
0AE8:  BTFSS  F9E.4
0AEA:  BRA    0AE8
0AEC:  MOVWF  FAD
0AEE:  MOVLW  0A
0AF0:  BTFSS  F9E.4
0AF2:  BRA    0AF0
0AF4:  MOVWF  FAD
.................... 
.................... 	delay_ms(1000);
0AF6:  MOVLW  04
0AF8:  MOVWF  x6F
0AFA:  MOVLW  FA
0AFC:  MOVWF  x70
0AFE:  RCALL  040E
0B00:  DECFSZ x6F,F
0B02:  BRA    0AFA
.................... 
.................... 	timers.led_on_a=500;
0B04:  MOVLW  F4
0B06:  MOVWF  x63
.................... 
.................... 	enable_interrupts(GLOBAL);
0B08:  MOVLW  C0
0B0A:  IORWF  FF2,F
.................... 
.................... 	/* enable I2C slave interrupt */
.................... 	enable_interrupts(INT_SSP);
0B0C:  BSF    F9D.3
.................... 
.................... 	for ( ; ; ) {
.................... 		restart_wdt();
0B0E:  CLRWDT
.................... 
.................... 		/* query INA228's for next */
.................... 		if ( timers.now_ina ) {
0B10:  BTFSS  x62.1
0B12:  BRA    0B16
.................... 			action_now_ina();
0B14:  BRA    062E
.................... 		}
.................... 
.................... 		if ( timers.now_millisecond ) {
0B16:  BTFSS  x62.0
0B18:  BRA    0B1C
.................... 			periodic_millisecond();
0B1A:  BRA    06C0
.................... 		}
.................... 
.................... 		if ( kbhit() ) {
0B1C:  BTFSS  F9E.5
0B1E:  BRA    0D80
.................... 			getc();
0B20:  BRA    06D6
.................... 
.................... 			fprintf(STREAM_FTDI,"# DIP SWITCHES: %d\r\n",
.................... 				read_dip_switch()
.................... 			);
0B22:  BRA    06EE
0B24:  MOVFF  01,6F
0B28:  MOVLW  D0
0B2A:  MOVWF  FF6
0B2C:  MOVLW  02
0B2E:  MOVWF  FF7
0B30:  MOVLW  10
0B32:  MOVWF  x70
0B34:  RCALL  0436
0B36:  MOVFF  6F,70
0B3A:  MOVLW  18
0B3C:  MOVWF  x71
0B3E:  BRA    0736
0B40:  MOVLW  0D
0B42:  BTFSS  F9E.4
0B44:  BRA    0B42
0B46:  MOVWF  FAD
0B48:  MOVLW  0A
0B4A:  BTFSS  F9E.4
0B4C:  BRA    0B4A
0B4E:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# A: 0x%08lx / 0x%08lx / 0x%04lu\r\n",
.................... 				current.vbus_a,
.................... 				current.vshunt_a,
.................... 				current.dietemp_a
.................... 			);
0B50:  MOVLW  E6
0B52:  MOVWF  FF6
0B54:  MOVLW  02
0B56:  MOVWF  FF7
0B58:  MOVLW  07
0B5A:  MOVWF  x70
0B5C:  RCALL  0436
0B5E:  MOVFF  1D,6F
0B62:  MOVLW  57
0B64:  MOVWF  x70
0B66:  RCALL  07EA
0B68:  MOVFF  1C,6F
0B6C:  MOVLW  57
0B6E:  MOVWF  x70
0B70:  RCALL  07EA
0B72:  MOVFF  1B,6F
0B76:  MOVLW  57
0B78:  MOVWF  x70
0B7A:  RCALL  07EA
0B7C:  MOVFF  1A,6F
0B80:  MOVLW  57
0B82:  MOVWF  x70
0B84:  RCALL  07EA
0B86:  MOVLW  F2
0B88:  MOVWF  FF6
0B8A:  MOVLW  02
0B8C:  MOVWF  FF7
0B8E:  MOVLW  05
0B90:  MOVWF  x70
0B92:  RCALL  0436
0B94:  MOVFF  21,6F
0B98:  MOVLW  57
0B9A:  MOVWF  x70
0B9C:  RCALL  07EA
0B9E:  MOVFF  20,6F
0BA2:  MOVLW  57
0BA4:  MOVWF  x70
0BA6:  RCALL  07EA
0BA8:  MOVFF  1F,6F
0BAC:  MOVLW  57
0BAE:  MOVWF  x70
0BB0:  RCALL  07EA
0BB2:  MOVFF  1E,6F
0BB6:  MOVLW  57
0BB8:  MOVWF  x70
0BBA:  RCALL  07EA
0BBC:  MOVLW  FC
0BBE:  MOVWF  FF6
0BC0:  MOVLW  02
0BC2:  MOVWF  FF7
0BC4:  MOVLW  05
0BC6:  MOVWF  x70
0BC8:  RCALL  0436
0BCA:  MOVLW  09
0BCC:  MOVWF  FE9
0BCE:  MOVFF  3B,70
0BD2:  MOVFF  3A,6F
0BD6:  RCALL  082C
0BD8:  MOVLW  0D
0BDA:  BTFSS  F9E.4
0BDC:  BRA    0BDA
0BDE:  MOVWF  FAD
0BE0:  MOVLW  0A
0BE2:  BTFSS  F9E.4
0BE4:  BRA    0BE2
0BE6:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# B: 0x%08lx / 0x%08lx / 0x%04lu\r\n",
.................... 				current.vbus_b,
.................... 				current.vshunt_b,
.................... 				current.dietemp_b
.................... 			);
0BE8:  MOVLW  0A
0BEA:  MOVWF  FF6
0BEC:  MOVLW  03
0BEE:  MOVWF  FF7
0BF0:  MOVLW  07
0BF2:  MOVWF  x70
0BF4:  RCALL  0436
0BF6:  MOVFF  25,6F
0BFA:  MOVLW  57
0BFC:  MOVWF  x70
0BFE:  RCALL  07EA
0C00:  MOVFF  24,6F
0C04:  MOVLW  57
0C06:  MOVWF  x70
0C08:  RCALL  07EA
0C0A:  MOVFF  23,6F
0C0E:  MOVLW  57
0C10:  MOVWF  x70
0C12:  RCALL  07EA
0C14:  MOVFF  22,6F
0C18:  MOVLW  57
0C1A:  MOVWF  x70
0C1C:  RCALL  07EA
0C1E:  MOVLW  16
0C20:  MOVWF  FF6
0C22:  MOVLW  03
0C24:  MOVWF  FF7
0C26:  MOVLW  05
0C28:  MOVWF  x70
0C2A:  RCALL  0436
0C2C:  MOVFF  29,6F
0C30:  MOVLW  57
0C32:  MOVWF  x70
0C34:  RCALL  07EA
0C36:  MOVFF  28,6F
0C3A:  MOVLW  57
0C3C:  MOVWF  x70
0C3E:  RCALL  07EA
0C40:  MOVFF  27,6F
0C44:  MOVLW  57
0C46:  MOVWF  x70
0C48:  RCALL  07EA
0C4A:  MOVFF  26,6F
0C4E:  MOVLW  57
0C50:  MOVWF  x70
0C52:  RCALL  07EA
0C54:  MOVLW  20
0C56:  MOVWF  FF6
0C58:  MOVLW  03
0C5A:  MOVWF  FF7
0C5C:  MOVLW  05
0C5E:  MOVWF  x70
0C60:  CALL   0436
0C64:  MOVLW  09
0C66:  MOVWF  FE9
0C68:  MOVFF  3D,70
0C6C:  MOVFF  3C,6F
0C70:  RCALL  082C
0C72:  MOVLW  0D
0C74:  BTFSS  F9E.4
0C76:  BRA    0C74
0C78:  MOVWF  FAD
0C7A:  MOVLW  0A
0C7C:  BTFSS  F9E.4
0C7E:  BRA    0C7C
0C80:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# current.count_a_last_second=%lu\r\n",
.................... 				current.count_a_last_second
.................... 			);
0C82:  MOVLW  2E
0C84:  MOVWF  FF6
0C86:  MOVLW  03
0C88:  MOVWF  FF7
0C8A:  MOVLW  1E
0C8C:  MOVWF  x70
0C8E:  CALL   0436
0C92:  MOVLW  10
0C94:  MOVWF  FE9
0C96:  MOVFF  2B,70
0C9A:  MOVFF  2A,6F
0C9E:  RCALL  082C
0CA0:  MOVLW  0D
0CA2:  BTFSS  F9E.4
0CA4:  BRA    0CA2
0CA6:  MOVWF  FAD
0CA8:  MOVLW  0A
0CAA:  BTFSS  F9E.4
0CAC:  BRA    0CAA
0CAE:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# current.count_b_last_second=%lu\r\n",
.................... 				current.count_b_last_second
.................... 			);
0CB0:  MOVLW  52
0CB2:  MOVWF  FF6
0CB4:  MOVLW  03
0CB6:  MOVWF  FF7
0CB8:  MOVLW  1E
0CBA:  MOVWF  x70
0CBC:  CALL   0436
0CC0:  MOVLW  10
0CC2:  MOVWF  FE9
0CC4:  MOVFF  2D,70
0CC8:  MOVFF  2C,6F
0CCC:  RCALL  082C
0CCE:  MOVLW  0D
0CD0:  BTFSS  F9E.4
0CD2:  BRA    0CD0
0CD4:  MOVWF  FAD
0CD6:  MOVLW  0A
0CD8:  BTFSS  F9E.4
0CDA:  BRA    0CD8
0CDC:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# current.count_a_long=%lu\r\n",
.................... 				current.count_a_long
.................... 			);
0CDE:  MOVLW  76
0CE0:  MOVWF  FF6
0CE2:  MOVLW  03
0CE4:  MOVWF  FF7
0CE6:  MOVLW  17
0CE8:  MOVWF  x70
0CEA:  CALL   0436
0CEE:  MOVLW  41
0CF0:  MOVWF  FE9
0CF2:  MOVFF  31,72
0CF6:  MOVFF  30,71
0CFA:  MOVFF  2F,70
0CFE:  MOVFF  2E,6F
0D02:  RCALL  0966
0D04:  MOVLW  0D
0D06:  BTFSS  F9E.4
0D08:  BRA    0D06
0D0A:  MOVWF  FAD
0D0C:  MOVLW  0A
0D0E:  BTFSS  F9E.4
0D10:  BRA    0D0E
0D12:  MOVWF  FAD
.................... 			fprintf(STREAM_FTDI,"# current.count_b_long=%lu\r\n",
.................... 				current.count_b_long
.................... 			);
0D14:  MOVLW  94
0D16:  MOVWF  FF6
0D18:  MOVLW  03
0D1A:  MOVWF  FF7
0D1C:  MOVLW  17
0D1E:  MOVWF  x70
0D20:  CALL   0436
0D24:  MOVLW  41
0D26:  MOVWF  FE9
0D28:  MOVFF  35,72
0D2C:  MOVFF  34,71
0D30:  MOVFF  33,70
0D34:  MOVFF  32,6F
0D38:  RCALL  0966
0D3A:  MOVLW  0D
0D3C:  BTFSS  F9E.4
0D3E:  BRA    0D3C
0D40:  MOVWF  FAD
0D42:  MOVLW  0A
0D44:  BTFSS  F9E.4
0D46:  BRA    0D44
0D48:  MOVWF  FAD
.................... 
.................... 			fprintf(STREAM_FTDI,"# current.count_seconds_long=%lu\r\n",
.................... 				current.count_seconds_long
.................... 			);
0D4A:  MOVLW  B2
0D4C:  MOVWF  FF6
0D4E:  MOVLW  03
0D50:  MOVWF  FF7
0D52:  MOVLW  1D
0D54:  MOVWF  x70
0D56:  CALL   0436
0D5A:  MOVLW  41
0D5C:  MOVWF  FE9
0D5E:  MOVFF  39,72
0D62:  MOVFF  38,71
0D66:  MOVFF  37,70
0D6A:  MOVFF  36,6F
0D6E:  RCALL  0966
0D70:  MOVLW  0D
0D72:  BTFSS  F9E.4
0D74:  BRA    0D72
0D76:  MOVWF  FAD
0D78:  MOVLW  0A
0D7A:  BTFSS  F9E.4
0D7C:  BRA    0D7A
0D7E:  MOVWF  FAD
.................... 
.................... 		}
0D80:  BRA    0B0E
.................... 
.................... 
.................... 	}
.................... 
.................... 
.................... }
0D82:  BRA    0D82

Configuration Fuses:
   Word  1: 2200   HS NOPLLEN PCLKEN NOFCMEN NOIESO
   Word  2: 1819   NOPUT NOBROWNOUT BORV19 NOWDT WDT4096
   Word  3: 0000   NOHFOFST NOMCLR
   Word  4: 0009   STVREN NOLVP BBSIZ2K NOXINST DEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 00 40 00                                        ..@.
